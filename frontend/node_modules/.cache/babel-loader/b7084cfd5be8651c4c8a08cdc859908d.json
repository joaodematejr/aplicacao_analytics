{"ast":null,"code":"import _slicedToArray from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _ from '@lodash'; // a little function to help us with reordering the result\n\nvar reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nexport default reorder;\nexport var reorderQuoteMap = function reorderQuoteMap(lists, source, destination) {\n  var current = _.find(lists, {\n    id: source.droppableId\n  });\n\n  var next = _.find(lists, {\n    id: destination.droppableId\n  });\n\n  var target = current.idCards[source.index]; // moving to same list\n\n  if (source.droppableId === destination.droppableId) {\n    var reordered = reorder(current.idCards, source.index, destination.index);\n    return lists.map(function (list) {\n      if (list.id === source.droppableId) {\n        list.idCards = reordered;\n      }\n\n      return list;\n    });\n  } // moving to different list\n  // remove from original\n\n\n  current.idCards.splice(source.index, 1); // insert into next\n\n  next.idCards.splice(destination.index, 0, target);\n  return lists.map(function (list) {\n    if (list.id === source.droppableId) {\n      return current;\n    }\n\n    if (list.id === destination.droppableId) {\n      return next;\n    }\n\n    return list;\n  });\n};","map":{"version":3,"sources":["/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/src/app/main/apps/scrumboard/store/actions/reorder.js"],"names":["_","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","reorderQuoteMap","lists","source","destination","current","find","id","droppableId","next","target","idCards","index","reordered","map"],"mappings":";AAAA,OAAOA,CAAP,MAAc,SAAd,C,CAEA;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,EAAgC;AAC5C,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAf;;AAD4C,uBAE1BG,MAAM,CAACG,MAAP,CAAcL,UAAd,EAA0B,CAA1B,CAF0B;AAAA;AAAA,MAErCM,OAFqC;;AAG5CJ,EAAAA,MAAM,CAACG,MAAP,CAAcJ,QAAd,EAAwB,CAAxB,EAA2BK,OAA3B;AAEA,SAAOJ,MAAP;AACH,CAND;;AAQA,eAAeJ,OAAf;AAEA,OAAO,IAAMS,eAAe,GACxB,SADSA,eACT,CACIC,KADJ,EAEIC,MAFJ,EAGIC,WAHJ,EAIK;AACD,MAAMC,OAAO,GAAGd,CAAC,CAACe,IAAF,CAAOJ,KAAP,EAAc;AAACK,IAAAA,EAAE,EAAEJ,MAAM,CAACK;AAAZ,GAAd,CAAhB;;AACA,MAAMC,IAAI,GAAGlB,CAAC,CAACe,IAAF,CAAOJ,KAAP,EAAc;AAACK,IAAAA,EAAE,EAAEH,WAAW,CAACI;AAAjB,GAAd,CAAb;;AACA,MAAME,MAAM,GAAGL,OAAO,CAACM,OAAR,CAAgBR,MAAM,CAACS,KAAvB,CAAf,CAHC,CAKD;;AACA,MAAKT,MAAM,CAACK,WAAP,KAAuBJ,WAAW,CAACI,WAAxC,EACA;AACI,QAAMK,SAAS,GAAGrB,OAAO,CACrBa,OAAO,CAACM,OADa,EAErBR,MAAM,CAACS,KAFc,EAGrBR,WAAW,CAACQ,KAHS,CAAzB;AAKA,WAAOV,KAAK,CAACY,GAAN,CAAU,UAACrB,IAAD,EAAU;AACvB,UAAKA,IAAI,CAACc,EAAL,KAAYJ,MAAM,CAACK,WAAxB,EACA;AACIf,QAAAA,IAAI,CAACkB,OAAL,GAAeE,SAAf;AACH;;AACD,aAAOpB,IAAP;AACH,KANM,CAAP;AAOH,GApBA,CAsBD;AAEA;;;AACAY,EAAAA,OAAO,CAACM,OAAR,CAAgBZ,MAAhB,CAAuBI,MAAM,CAACS,KAA9B,EAAqC,CAArC,EAzBC,CA0BD;;AACAH,EAAAA,IAAI,CAACE,OAAL,CAAaZ,MAAb,CAAoBK,WAAW,CAACQ,KAAhC,EAAuC,CAAvC,EAA0CF,MAA1C;AAEA,SAAOR,KAAK,CAACY,GAAN,CAAU,UAACrB,IAAD,EAAU;AACvB,QAAKA,IAAI,CAACc,EAAL,KAAYJ,MAAM,CAACK,WAAxB,EACA;AACI,aAAOH,OAAP;AACH;;AACD,QAAKZ,IAAI,CAACc,EAAL,KAAYH,WAAW,CAACI,WAA7B,EACA;AACI,aAAOC,IAAP;AACH;;AACD,WAAOhB,IAAP;AACH,GAVM,CAAP;AAWH,CA7CE","sourcesContent":["import _ from '@lodash';\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nexport default reorder;\n\nexport const reorderQuoteMap =\n    (\n        lists,\n        source,\n        destination\n    ) => {\n        const current = _.find(lists, {id: source.droppableId});\n        const next = _.find(lists, {id: destination.droppableId});\n        const target = current.idCards[source.index];\n\n        // moving to same list\n        if ( source.droppableId === destination.droppableId )\n        {\n            const reordered = reorder(\n                current.idCards,\n                source.index,\n                destination.index\n            );\n            return lists.map((list) => {\n                if ( list.id === source.droppableId )\n                {\n                    list.idCards = reordered;\n                }\n                return list;\n            });\n        }\n\n        // moving to different list\n\n        // remove from original\n        current.idCards.splice(source.index, 1);\n        // insert into next\n        next.idCards.splice(destination.index, 0, target);\n\n        return lists.map((list) => {\n            if ( list.id === source.droppableId )\n            {\n                return current;\n            }\n            if ( list.id === destination.droppableId )\n            {\n                return next;\n            }\n            return list;\n        });\n    };\n"]},"metadata":{},"sourceType":"module"}