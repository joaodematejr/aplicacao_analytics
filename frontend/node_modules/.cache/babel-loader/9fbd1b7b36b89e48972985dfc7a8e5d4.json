{"ast":null,"code":"import axios from 'axios';\nimport { getUserData } from 'app/main/apps/contacts/store/actions/user.actions';\nexport var GET_CONTACTS = '[CONTACTS APP] GET CONTACTS';\nexport var SET_SEARCH_TEXT = '[CONTACTS APP] SET SEARCH TEXT';\nexport var TOGGLE_IN_SELECTED_CONTACTS = '[CONTACTS APP] TOGGLE IN SELECTED CONTACTS';\nexport var SELECT_ALL_CONTACTS = '[CONTACTS APP] SELECT ALL CONTACTS';\nexport var DESELECT_ALL_CONTACTS = '[CONTACTS APP] DESELECT ALL CONTACTS';\nexport var OPEN_NEW_CONTACT_DIALOG = '[CONTACTS APP] OPEN NEW CONTACT DIALOG';\nexport var CLOSE_NEW_CONTACT_DIALOG = '[CONTACTS APP] CLOSE NEW CONTACT DIALOG';\nexport var OPEN_EDIT_CONTACT_DIALOG = '[CONTACTS APP] OPEN EDIT CONTACT DIALOG';\nexport var CLOSE_EDIT_CONTACT_DIALOG = '[CONTACTS APP] CLOSE EDIT CONTACT DIALOG';\nexport var ADD_CONTACT = '[CONTACTS APP] ADD CONTACT';\nexport var UPDATE_CONTACT = '[CONTACTS APP] UPDATE CONTACT';\nexport var REMOVE_CONTACT = '[CONTACTS APP] REMOVE CONTACT';\nexport var REMOVE_CONTACTS = '[CONTACTS APP] REMOVE CONTACTS';\nexport var TOGGLE_STARRED_CONTACT = '[CONTACTS APP] TOGGLE STARRED CONTACT';\nexport var TOGGLE_STARRED_CONTACTS = '[CONTACTS APP] TOGGLE STARRED CONTACTS';\nexport var SET_CONTACTS_STARRED = '[CONTACTS APP] SET CONTACTS STARRED ';\nexport function getContacts(routeParams) {\n  var request = axios.get('/api/contacts-app/contacts', {\n    params: routeParams\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: GET_CONTACTS,\n        payload: response.data,\n        routeParams: routeParams\n      });\n    });\n  };\n}\nexport function setSearchText(event) {\n  return {\n    type: SET_SEARCH_TEXT,\n    searchText: event.target.value\n  };\n}\nexport function toggleInSelectedContacts(contactId) {\n  return {\n    type: TOGGLE_IN_SELECTED_CONTACTS,\n    contactId: contactId\n  };\n}\nexport function selectAllContacts() {\n  return {\n    type: SELECT_ALL_CONTACTS\n  };\n}\nexport function deSelectAllContacts() {\n  return {\n    type: DESELECT_ALL_CONTACTS\n  };\n}\nexport function openNewContactDialog() {\n  return {\n    type: OPEN_NEW_CONTACT_DIALOG\n  };\n}\nexport function closeNewContactDialog() {\n  return {\n    type: CLOSE_NEW_CONTACT_DIALOG\n  };\n}\nexport function openEditContactDialog(data) {\n  return {\n    type: OPEN_EDIT_CONTACT_DIALOG,\n    data: data\n  };\n}\nexport function closeEditContactDialog() {\n  return {\n    type: CLOSE_EDIT_CONTACT_DIALOG\n  };\n}\nexport function addContact(newContact) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/add-contact', {\n      newContact: newContact\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: ADD_CONTACT\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function updateContact(contact) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/update-contact', {\n      contact: contact\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: UPDATE_CONTACT\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function removeContact(contactId) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/remove-contact', {\n      contactId: contactId\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: REMOVE_CONTACT\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function removeContacts(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/remove-contacts', {\n      contactIds: contactIds\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: REMOVE_CONTACTS\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function toggleStarredContact(contactId) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/toggle-starred-contact', {\n      contactId: contactId\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: TOGGLE_STARRED_CONTACT\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function toggleStarredContacts(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/toggle-starred-contacts', {\n      contactIds: contactIds\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: TOGGLE_STARRED_CONTACTS\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function setContactsStarred(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/set-contacts-starred', {\n      contactIds: contactIds\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: SET_CONTACTS_STARRED\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function setContactsUnstarred(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/set-contacts-unstarred', {\n      contactIds: contactIds\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: SET_CONTACTS_STARRED\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/src/app/main/apps/contacts/store/actions/contacts.actions.js"],"names":["axios","getUserData","GET_CONTACTS","SET_SEARCH_TEXT","TOGGLE_IN_SELECTED_CONTACTS","SELECT_ALL_CONTACTS","DESELECT_ALL_CONTACTS","OPEN_NEW_CONTACT_DIALOG","CLOSE_NEW_CONTACT_DIALOG","OPEN_EDIT_CONTACT_DIALOG","CLOSE_EDIT_CONTACT_DIALOG","ADD_CONTACT","UPDATE_CONTACT","REMOVE_CONTACT","REMOVE_CONTACTS","TOGGLE_STARRED_CONTACT","TOGGLE_STARRED_CONTACTS","SET_CONTACTS_STARRED","getContacts","routeParams","request","get","params","dispatch","then","response","type","payload","data","setSearchText","event","searchText","target","value","toggleInSelectedContacts","contactId","selectAllContacts","deSelectAllContacts","openNewContactDialog","closeNewContactDialog","openEditContactDialog","closeEditContactDialog","addContact","newContact","getState","contactsApp","contacts","post","Promise","all","updateContact","contact","removeContact","removeContacts","contactIds","toggleStarredContact","toggleStarredContacts","setContactsStarred","setContactsUnstarred"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {getUserData} from 'app/main/apps/contacts/store/actions/user.actions';\n\nexport const GET_CONTACTS = '[CONTACTS APP] GET CONTACTS';\nexport const SET_SEARCH_TEXT = '[CONTACTS APP] SET SEARCH TEXT';\nexport const TOGGLE_IN_SELECTED_CONTACTS = '[CONTACTS APP] TOGGLE IN SELECTED CONTACTS';\nexport const SELECT_ALL_CONTACTS = '[CONTACTS APP] SELECT ALL CONTACTS';\nexport const DESELECT_ALL_CONTACTS = '[CONTACTS APP] DESELECT ALL CONTACTS';\nexport const OPEN_NEW_CONTACT_DIALOG = '[CONTACTS APP] OPEN NEW CONTACT DIALOG';\nexport const CLOSE_NEW_CONTACT_DIALOG = '[CONTACTS APP] CLOSE NEW CONTACT DIALOG';\nexport const OPEN_EDIT_CONTACT_DIALOG = '[CONTACTS APP] OPEN EDIT CONTACT DIALOG';\nexport const CLOSE_EDIT_CONTACT_DIALOG = '[CONTACTS APP] CLOSE EDIT CONTACT DIALOG';\nexport const ADD_CONTACT = '[CONTACTS APP] ADD CONTACT';\nexport const UPDATE_CONTACT = '[CONTACTS APP] UPDATE CONTACT';\nexport const REMOVE_CONTACT = '[CONTACTS APP] REMOVE CONTACT';\nexport const REMOVE_CONTACTS = '[CONTACTS APP] REMOVE CONTACTS';\nexport const TOGGLE_STARRED_CONTACT = '[CONTACTS APP] TOGGLE STARRED CONTACT';\nexport const TOGGLE_STARRED_CONTACTS = '[CONTACTS APP] TOGGLE STARRED CONTACTS';\nexport const SET_CONTACTS_STARRED = '[CONTACTS APP] SET CONTACTS STARRED ';\n\nexport function getContacts(routeParams)\n{\n    const request = axios.get('/api/contacts-app/contacts', {\n        params: routeParams\n    });\n\n    return (dispatch) =>\n        request.then((response) =>\n            dispatch({\n                type   : GET_CONTACTS,\n                payload: response.data,\n                routeParams\n            })\n        );\n}\n\nexport function setSearchText(event)\n{\n    return {\n        type      : SET_SEARCH_TEXT,\n        searchText: event.target.value\n    }\n}\n\nexport function toggleInSelectedContacts(contactId)\n{\n    return {\n        type: TOGGLE_IN_SELECTED_CONTACTS,\n        contactId\n    }\n}\n\n\nexport function selectAllContacts()\n{\n    return {\n        type: SELECT_ALL_CONTACTS\n    }\n}\n\nexport function deSelectAllContacts()\n{\n    return {\n        type: DESELECT_ALL_CONTACTS\n    }\n}\n\n\nexport function openNewContactDialog()\n{\n    return {\n        type: OPEN_NEW_CONTACT_DIALOG\n    }\n}\n\nexport function closeNewContactDialog()\n{\n    return {\n        type: CLOSE_NEW_CONTACT_DIALOG\n    }\n}\n\nexport function openEditContactDialog(data)\n{\n    return {\n        type: OPEN_EDIT_CONTACT_DIALOG,\n        data\n    }\n}\n\nexport function closeEditContactDialog()\n{\n    return {\n        type: CLOSE_EDIT_CONTACT_DIALOG\n    }\n}\n\nexport function addContact(newContact)\n{\n    return (dispatch, getState) => {\n\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/add-contact', {\n            newContact\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: ADD_CONTACT\n                })\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\nexport function updateContact(contact)\n{\n    return (dispatch, getState) => {\n\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/update-contact', {\n            contact\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: UPDATE_CONTACT\n                })\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\nexport function removeContact(contactId)\n{\n    return (dispatch, getState) => {\n\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/remove-contact', {\n            contactId\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: REMOVE_CONTACT\n                })\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\n\nexport function removeContacts(contactIds)\n{\n    return (dispatch, getState) => {\n\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/remove-contacts', {\n            contactIds\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: REMOVE_CONTACTS\n                }),\n                dispatch({\n                    type: DESELECT_ALL_CONTACTS\n                })\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\nexport function toggleStarredContact(contactId)\n{\n    return (dispatch, getState) => {\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/toggle-starred-contact', {\n            contactId\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: TOGGLE_STARRED_CONTACT\n                }),\n                dispatch(getUserData())\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\nexport function toggleStarredContacts(contactIds)\n{\n    return (dispatch, getState) => {\n\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/toggle-starred-contacts', {\n            contactIds\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: TOGGLE_STARRED_CONTACTS\n                }),\n                dispatch({\n                    type: DESELECT_ALL_CONTACTS\n                }),\n                dispatch(getUserData())\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\nexport function setContactsStarred(contactIds)\n{\n    return (dispatch, getState) => {\n\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/set-contacts-starred', {\n            contactIds\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: SET_CONTACTS_STARRED\n                }),\n                dispatch({\n                    type: DESELECT_ALL_CONTACTS\n                }),\n                dispatch(getUserData())\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\nexport function setContactsUnstarred(contactIds)\n{\n    return (dispatch, getState) => {\n\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/set-contacts-unstarred', {\n            contactIds\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: SET_CONTACTS_STARRED\n                }),\n                dispatch({\n                    type: DESELECT_ALL_CONTACTS\n                }),\n                dispatch(getUserData())\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n"]},"metadata":{},"sourceType":"module"}