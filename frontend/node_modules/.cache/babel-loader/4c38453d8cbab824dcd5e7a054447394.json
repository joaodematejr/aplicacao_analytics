{"ast":null,"code":"import _toConsumableArray from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport mock from './../mock';\nimport _ from '@lodash';\nimport { FuseUtils } from '@fuse';\nimport jwt from 'jsonwebtoken';\nvar jwtConfig = {\n  \"secret\": \"some-secret-code-goes-here\",\n  \"expiresIn\": \"2 days\" // A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc)\n\n};\nvar authDB = {\n  users: [{\n    uuid: 'XgbuVEXBU5gtSKdbQRP1Zbbby1i1',\n    from: 'custom-db',\n    password: \"admin\",\n    role: \"admin\",\n    data: {\n      'displayName': 'Abbott Keitch',\n      'photoURL': 'assets/images/avatars/Abbott.jpg',\n      'email': 'admin',\n      settings: {\n        layout: {\n          style: 'layout1',\n          config: {\n            scroll: 'content',\n            navbar: {\n              display: true,\n              folded: true,\n              position: 'left'\n            },\n            toolbar: {\n              display: true,\n              style: 'fixed',\n              position: 'below'\n            },\n            footer: {\n              display: true,\n              style: 'fixed',\n              position: 'below'\n            },\n            mode: 'fullwidth'\n          }\n        },\n        customScrollbars: true,\n        theme: {\n          main: 'defaultDark',\n          navbar: 'defaultDark',\n          toolbar: 'defaultDark',\n          footer: 'defaultDark'\n        }\n      },\n      shortcuts: ['calendar', 'mail', 'contacts']\n    }\n  }, {\n    uuid: 'XgbuVEXBU6gtSKdbTYR1Zbbby1i3',\n    from: 'custom-db',\n    password: \"staff\",\n    role: \"staff\",\n    data: {\n      'displayName': 'Arnold Matlock',\n      'photoURL': 'assets/images/avatars/Arnold.jpg',\n      'email': 'staff',\n      settings: {\n        layout: {\n          style: 'layout2',\n          config: {\n            mode: 'boxed',\n            scroll: 'content',\n            navbar: {\n              display: true\n            },\n            toolbar: {\n              display: true,\n              position: 'below'\n            },\n            footer: {\n              display: true,\n              style: 'fixed'\n            }\n          }\n        },\n        customScrollbars: true,\n        theme: {\n          main: 'greeny',\n          navbar: 'mainThemeDark',\n          toolbar: 'mainThemeDark',\n          footer: 'mainThemeDark'\n        }\n      },\n      shortcuts: ['calendar', 'mail', 'contacts', 'todo']\n    }\n  }]\n};\nmock.onGet('/api/auth').reply(function (config) {\n  var data = JSON.parse(config.data);\n  var email = data.email,\n      password = data.password;\n\n  var user = _.cloneDeep(authDB.users.find(function (_user) {\n    return _user.data.email === email;\n  }));\n\n  var error = {\n    email: user ? null : 'Check your username/email',\n    password: user && user.password === password ? null : 'Check your password'\n  };\n\n  if (!error.email && !error.password && !error.displayName) {\n    delete user['password'];\n    var access_token = jwt.sign({\n      id: user.uuid\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expiresIn\n    });\n    var response = {\n      \"user\": user,\n      \"access_token\": access_token\n    };\n    return [200, response];\n  } else {\n    return [200, {\n      error: error\n    }];\n  }\n});\nmock.onGet('/api/auth/access-token').reply(function (config) {\n  var data = JSON.parse(config.data);\n  var access_token = data.access_token;\n\n  try {\n    var _jwt$verify = jwt.verify(access_token, jwtConfig.secret),\n        id = _jwt$verify.id;\n\n    var user = _.cloneDeep(authDB.users.find(function (_user) {\n      return _user.uuid === id;\n    }));\n\n    delete user['password'];\n    var updatedAccessToken = jwt.sign({\n      id: user.uuid\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expiresIn\n    });\n    var response = {\n      \"user\": user,\n      \"access_token\": updatedAccessToken\n    };\n    return [200, response];\n  } catch (e) {\n    var error = \"Invalid access token detected\";\n    return [401, {\n      error: error\n    }];\n  }\n});\nmock.onPost('/api/auth/register').reply(function (request) {\n  var data = JSON.parse(request.data);\n  var displayName = data.displayName,\n      password = data.password,\n      email = data.email;\n  var isEmailExists = authDB.users.find(function (_user) {\n    return _user.data.email === email;\n  });\n  var error = {\n    email: isEmailExists ? 'The email is already in use' : null,\n    displayName: displayName !== '' ? null : 'Enter display name',\n    password: null\n  };\n\n  if (!error.displayName && !error.password && !error.email) {\n    var newUser = {\n      uuid: FuseUtils.generateGUID(),\n      from: 'custom-db',\n      password: password,\n      role: \"admin\",\n      data: {\n        displayName: displayName,\n        photoURL: 'assets/images/avatars/Abbott.jpg',\n        email: email,\n        settings: {},\n        shortcuts: []\n      }\n    };\n    authDB.users = [].concat(_toConsumableArray(authDB.users), [newUser]);\n\n    var user = _.cloneDeep(newUser);\n\n    delete user['password'];\n    var access_token = jwt.sign({\n      id: user.uuid\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expiresIn\n    });\n    var response = {\n      \"user\": user,\n      \"access_token\": access_token\n    };\n    return [200, response];\n  } else {\n    return [200, {\n      error: error\n    }];\n  }\n});\nmock.onPost('/api/auth/user/update').reply(function (config) {\n  var data = JSON.parse(config.data);\n  var user = data.user;\n  authDB.users = authDB.users.map(function (_user) {\n    if (user.uuid === user.id) {\n      return _.merge(_user, user);\n    }\n\n    return _user;\n  });\n  return [200, user];\n});","map":{"version":3,"sources":["/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/src/@fake-db/db/auth-db.js"],"names":["mock","_","FuseUtils","jwt","jwtConfig","authDB","users","uuid","from","password","role","data","settings","layout","style","config","scroll","navbar","display","folded","position","toolbar","footer","mode","customScrollbars","theme","main","shortcuts","onGet","reply","JSON","parse","email","user","cloneDeep","find","_user","error","displayName","access_token","sign","id","secret","expiresIn","response","verify","updatedAccessToken","e","onPost","request","isEmailExists","newUser","generateGUID","photoURL","map","merge"],"mappings":"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","sourcesContent":["import mock from './../mock';\nimport _ from '@lodash';\nimport {FuseUtils} from '@fuse';\nimport jwt from 'jsonwebtoken';\n\nconst jwtConfig = {\n    \"secret\"   : \"some-secret-code-goes-here\",\n    \"expiresIn\": \"2 days\" // A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc)\n};\n\nlet authDB = {\n    users: [\n        {\n            uuid    : 'XgbuVEXBU5gtSKdbQRP1Zbbby1i1',\n            from    : 'custom-db',\n            password: \"admin\",\n            role    : \"admin\",\n            data    : {\n                'displayName': 'Abbott Keitch',\n                'photoURL'   : 'assets/images/avatars/Abbott.jpg',\n                'email'      : 'admin',\n                settings     : {\n                    layout          : {\n                        style : 'layout1',\n                        config: {\n                            scroll : 'content',\n                            navbar : {\n                                display : true,\n                                folded  : true,\n                                position: 'left'\n                            },\n                            toolbar: {\n                                display : true,\n                                style   : 'fixed',\n                                position: 'below'\n                            },\n                            footer : {\n                                display : true,\n                                style   : 'fixed',\n                                position: 'below'\n                            },\n                            mode   : 'fullwidth'\n                        }\n                    },\n                    customScrollbars: true,\n                    theme           : {\n                        main   : 'defaultDark',\n                        navbar : 'defaultDark',\n                        toolbar: 'defaultDark',\n                        footer : 'defaultDark'\n                    }\n                },\n                shortcuts    : [\n                    'calendar',\n                    'mail',\n                    'contacts'\n                ]\n            }\n        },\n        {\n            uuid    : 'XgbuVEXBU6gtSKdbTYR1Zbbby1i3',\n            from    : 'custom-db',\n            password: \"staff\",\n            role    : \"staff\",\n            data    : {\n                'displayName': 'Arnold Matlock',\n                'photoURL'   : 'assets/images/avatars/Arnold.jpg',\n                'email'      : 'staff',\n                settings     : {\n                    layout          : {\n                        style : 'layout2',\n                        config: {\n                            mode   : 'boxed',\n                            scroll : 'content',\n                            navbar : {\n                                display: true\n                            },\n                            toolbar: {\n                                display : true,\n                                position: 'below'\n                            },\n                            footer : {\n                                display: true,\n                                style  : 'fixed'\n                            }\n                        }\n                    },\n                    customScrollbars: true,\n                    theme           : {\n                        main   : 'greeny',\n                        navbar : 'mainThemeDark',\n                        toolbar: 'mainThemeDark',\n                        footer : 'mainThemeDark'\n                    }\n                },\n                shortcuts    : [\n                    'calendar',\n                    'mail',\n                    'contacts',\n                    'todo'\n                ]\n            }\n        }\n    ]\n};\n\nmock.onGet('/api/auth').reply((config) => {\n    const data = JSON.parse(config.data);\n    const {email, password} = data;\n\n    const user = _.cloneDeep(authDB.users.find(_user => _user.data.email === email));\n\n    const error = {\n        email   : user ? null : 'Check your username/email',\n        password: user && user.password === password ? null : 'Check your password'\n    };\n\n    if ( !error.email && !error.password && !error.displayName )\n    {\n        delete user['password'];\n\n        const access_token = jwt.sign({id: user.uuid}, jwtConfig.secret, {expiresIn: jwtConfig.expiresIn});\n\n        const response = {\n            \"user\"        : user,\n            \"access_token\": access_token\n        };\n\n        return [200, response];\n    }\n    else\n    {\n        return [200, {error}];\n    }\n});\n\nmock.onGet('/api/auth/access-token').reply((config) => {\n    const data = JSON.parse(config.data);\n    const {access_token} = data;\n\n    try\n    {\n        const {id} = jwt.verify(access_token, jwtConfig.secret);\n\n        const user = _.cloneDeep(authDB.users.find(_user => _user.uuid === id));\n        delete user['password'];\n\n        const updatedAccessToken = jwt.sign({id: user.uuid}, jwtConfig.secret, {expiresIn: jwtConfig.expiresIn});\n\n        const response = {\n            \"user\"        : user,\n            \"access_token\": updatedAccessToken\n        };\n\n        return [200, response];\n    } catch ( e )\n    {\n        const error = \"Invalid access token detected\";\n        return [401, {error}];\n    }\n});\n\nmock.onPost('/api/auth/register').reply((request) => {\n    const data = JSON.parse(request.data);\n    const {displayName, password, email} = data;\n    const isEmailExists = authDB.users.find(_user => _user.data.email === email);\n    const error = {\n        email      : isEmailExists ? 'The email is already in use' : null,\n        displayName: displayName !== '' ? null : 'Enter display name',\n        password   : null\n    };\n    if ( !error.displayName && !error.password && !error.email )\n    {\n        const newUser = {\n            uuid    : FuseUtils.generateGUID(),\n            from    : 'custom-db',\n            password: password,\n            role    : \"admin\",\n            data    : {\n                displayName: displayName,\n                photoURL   : 'assets/images/avatars/Abbott.jpg',\n                email      : email,\n                settings   : {},\n                shortcuts  : []\n            }\n        };\n\n        authDB.users = [\n            ...authDB.users,\n            newUser\n        ];\n\n        const user = _.cloneDeep(newUser);\n        delete user['password'];\n\n        const access_token = jwt.sign({id: user.uuid}, jwtConfig.secret, {expiresIn: jwtConfig.expiresIn});\n\n        const response = {\n            \"user\"        : user,\n            \"access_token\": access_token\n        };\n\n        return [200, response];\n    }\n    else\n    {\n        return [200, {error}];\n    }\n});\n\nmock.onPost('/api/auth/user/update').reply((config) => {\n    const data = JSON.parse(config.data);\n    const {user} = data;\n\n    authDB.users = authDB.users.map((_user) => {\n        if ( user.uuid === user.id )\n        {\n            return _.merge(_user, user);\n        }\n        return _user\n    });\n\n    return [200, user];\n});\n"]},"metadata":{},"sourceType":"module"}