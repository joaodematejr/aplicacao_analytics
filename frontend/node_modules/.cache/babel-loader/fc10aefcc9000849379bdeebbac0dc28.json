{"ast":null,"code":"import _defineProperty from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/src/app/main/apps/mail/mails/MailsToolbar.js\";\nimport React, { Component } from 'react';\nimport { Checkbox, Icon, IconButton, Menu, MenuItem } from '@material-ui/core';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport * as Actions from '../store/actions/index';\n\nvar MailToolbar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MailToolbar, _Component);\n\n  function MailToolbar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MailToolbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MailToolbar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectMenu: null,\n      foldersMenu: null,\n      labelsMenu: null\n    };\n\n    _this.handleMenuOpen = function (event, menu) {\n      _this.setState(_defineProperty({}, menu, event.currentTarget));\n    };\n\n    _this.handleMenuClose = function (event, menu) {\n      _this.setState(_defineProperty({}, menu, null));\n    };\n\n    _this.handleChange = function () {\n      return function (event) {\n        event.target.checked ? _this.props.selectAllMails() : _this.props.deselectAllMails();\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(MailToolbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          mails = _this$props.mails,\n          selectAllMails = _this$props.selectAllMails,\n          deselectAllMails = _this$props.deselectAllMails,\n          selectMailsByParameter = _this$props.selectMailsByParameter,\n          setFolderOnSelectedMails = _this$props.setFolderOnSelectedMails,\n          toggleLabelOnSelectedMails = _this$props.toggleLabelOnSelectedMails,\n          folders = _this$props.folders,\n          labels = _this$props.labels,\n          selectedMailIds = _this$props.selectedMailIds;\n      var _this$state = this.state,\n          foldersMenu = _this$state.foldersMenu,\n          selectMenu = _this$state.selectMenu,\n          labelsMenu = _this$state.labelsMenu;\n      return React.createElement(\"div\", {\n        className: \"flex flex-1 items-center sm:px-8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        onChange: this.handleChange(),\n        checked: selectedMailIds.length === Object.keys(mails).length && selectedMailIds.length > 0,\n        indeterminate: selectedMailIds.length !== Object.keys(mails).length && selectedMailIds.length > 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(IconButton, {\n        className: \"w-24\",\n        \"aria-label\": \"More\",\n        \"aria-owns\": selectMenu ? 'select-menu' : null,\n        \"aria-haspopup\": \"true\",\n        onClick: function onClick(ev) {\n          return _this2.handleMenuOpen(ev, 'selectMenu');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"arrow_drop_down\")), React.createElement(Menu, {\n        id: \"select-menu\",\n        anchorEl: selectMenu,\n        open: Boolean(selectMenu),\n        onClose: function onClose(ev) {\n          return _this2.handleMenuClose(ev, 'selectMenu');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(MenuItem, {\n        onClick: function onClick(ev) {\n          selectAllMails();\n\n          _this2.handleMenuClose(ev, 'selectMenu');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"All\"), React.createElement(MenuItem, {\n        onClick: function onClick(ev) {\n          deselectAllMails();\n\n          _this2.handleMenuClose(ev, 'selectMenu');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"None\"), React.createElement(MenuItem, {\n        onClick: function onClick(ev) {\n          selectMailsByParameter('read', true);\n\n          _this2.handleMenuClose(ev, 'selectMenu');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Read\"), React.createElement(MenuItem, {\n        onClick: function onClick(ev) {\n          selectMailsByParameter('read', false);\n\n          _this2.handleMenuClose(ev, 'selectMenu');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Unread\"), React.createElement(MenuItem, {\n        onClick: function onClick(ev) {\n          selectMailsByParameter('starred', true);\n\n          _this2.handleMenuClose(ev, 'selectMenu');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Starred\"), React.createElement(MenuItem, {\n        onClick: function onClick(ev) {\n          selectMailsByParameter('starred', false);\n\n          _this2.handleMenuClose(ev, 'selectMenu');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Unstarred\"), React.createElement(MenuItem, {\n        onClick: function onClick(ev) {\n          selectMailsByParameter('important', true);\n\n          _this2.handleMenuClose(ev, 'selectMenu');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Important\"), React.createElement(MenuItem, {\n        onClick: function onClick(ev) {\n          selectMailsByParameter('important', false);\n\n          _this2.handleMenuClose(ev, 'selectMenu');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Unimportant\")), selectedMailIds.length > 0 && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"border-r-1 h-48 w-1 mx-12 my-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), React.createElement(IconButton, {\n        onClick: function onClick(ev) {\n          return setFolderOnSelectedMails(4);\n        },\n        \"aria-label\": \"Delete\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"delete\")), React.createElement(IconButton, {\n        \"aria-label\": \"More\",\n        \"aria-owns\": foldersMenu ? 'folders-menu' : null,\n        \"aria-haspopup\": \"true\",\n        onClick: function onClick(ev) {\n          return _this2.handleMenuOpen(ev, 'foldersMenu');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"folder\")), React.createElement(Menu, {\n        id: \"folders-menu\",\n        anchorEl: foldersMenu,\n        open: Boolean(foldersMenu),\n        onClose: function onClose(ev) {\n          return _this2.handleMenuClose(ev, 'foldersMenu');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, folders.length > 0 && folders.map(function (folder) {\n        return React.createElement(MenuItem, {\n          onClick: function onClick(ev) {\n            setFolderOnSelectedMails(folder.id);\n\n            _this2.handleMenuClose(ev, 'foldersMenu');\n          },\n          key: folder.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, folder.title);\n      })), React.createElement(IconButton, {\n        \"aria-label\": \"More\",\n        \"aria-owns\": labelsMenu ? 'labels-menu' : null,\n        \"aria-haspopup\": \"true\",\n        onClick: function onClick(ev) {\n          return _this2.handleMenuOpen(ev, 'labelsMenu');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"label\")), React.createElement(Menu, {\n        id: \"folders-menu\",\n        anchorEl: labelsMenu,\n        open: Boolean(labelsMenu),\n        onClose: function onClose(ev) {\n          return _this2.handleMenuClose(ev, 'labelsMenu');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, labels.length > 0 && labels.map(function (label) {\n        return React.createElement(MenuItem, {\n          onClick: function onClick(ev) {\n            toggleLabelOnSelectedMails(label.id);\n\n            _this2.handleMenuClose(ev, 'labelsMenu');\n          },\n          key: label.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, label.title);\n      }))));\n    }\n  }]);\n\n  return MailToolbar;\n}(Component);\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    selectAllMails: Actions.selectAllMails,\n    deselectAllMails: Actions.deselectAllMails,\n    selectMailsByParameter: Actions.selectMailsByParameter,\n    setFolderOnSelectedMails: Actions.setFolderOnSelectedMails,\n    toggleLabelOnSelectedMails: Actions.toggleLabelOnSelectedMails\n  }, dispatch);\n}\n\nfunction mapStateToProps(_ref) {\n  var mailApp = _ref.mailApp;\n  return {\n    mails: mailApp.mails.entities,\n    selectedMailIds: mailApp.mails.selectedMailIds,\n    folders: mailApp.folders,\n    labels: mailApp.labels,\n    filters: mailApp.filters\n  };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MailToolbar));","map":{"version":3,"sources":["/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/src/app/main/apps/mail/mails/MailsToolbar.js"],"names":["React","Component","Checkbox","Icon","IconButton","Menu","MenuItem","bindActionCreators","connect","withRouter","Actions","MailToolbar","state","selectMenu","foldersMenu","labelsMenu","handleMenuOpen","event","menu","setState","currentTarget","handleMenuClose","handleChange","target","checked","props","selectAllMails","deselectAllMails","mails","selectMailsByParameter","setFolderOnSelectedMails","toggleLabelOnSelectedMails","folders","labels","selectedMailIds","length","Object","keys","ev","Boolean","map","folder","id","title","label","mapDispatchToProps","dispatch","mapStateToProps","mailApp","entities","filters"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,UAAxB,EAAoCC,IAApC,EAA0CC,QAA1C,QAAyD,mBAAzD;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAO,KAAKC,OAAZ,MAAyB,wBAAzB;;IAEMC,W;;;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACJC,MAAAA,UAAU,EAAG,IADT;AAEJC,MAAAA,WAAW,EAAE,IAFT;AAGJC,MAAAA,UAAU,EAAG;AAHT,K;;UAMRC,c,GAAiB,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC9B,YAAKC,QAAL,qBAAgBD,IAAhB,EAAuBD,KAAK,CAACG,aAA7B;AACH,K;;UAEDC,e,GAAkB,UAACJ,KAAD,EAAQC,IAAR,EAAiB;AAC/B,YAAKC,QAAL,qBAAgBD,IAAhB,EAAuB,IAAvB;AACH,K;;UAEDI,Y,GAAe;AAAA,aAAM,UAAAL,KAAK,EAAI;AAC1BA,QAAAA,KAAK,CAACM,MAAN,CAAaC,OAAb,GAAuB,MAAKC,KAAL,CAAWC,cAAX,EAAvB,GAAqD,MAAKD,KAAL,CAAWE,gBAAX,EAArD;AACH,OAFc;AAAA,K;;;;;;;6BAKf;AAAA;;AAAA,wBACsK,KAAKF,KAD3K;AAAA,UACWG,KADX,eACWA,KADX;AAAA,UACkBF,cADlB,eACkBA,cADlB;AAAA,UACkCC,gBADlC,eACkCA,gBADlC;AAAA,UACoDE,sBADpD,eACoDA,sBADpD;AAAA,UAC4EC,wBAD5E,eAC4EA,wBAD5E;AAAA,UACsGC,0BADtG,eACsGA,0BADtG;AAAA,UACkIC,OADlI,eACkIA,OADlI;AAAA,UAC2IC,MAD3I,eAC2IA,MAD3I;AAAA,UACmJC,eADnJ,eACmJA,eADnJ;AAAA,wBAEkD,KAAKtB,KAFvD;AAAA,UAEWE,WAFX,eAEWA,WAFX;AAAA,UAEwBD,UAFxB,eAEwBA,UAFxB;AAAA,UAEoCE,UAFpC,eAEoCA,UAFpC;AAII,aACI;AAAK,QAAA,SAAS,EAAC,kCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,QAAD;AACI,QAAA,QAAQ,EAAE,KAAKO,YAAL,EADd;AAEI,QAAA,OAAO,EAAEY,eAAe,CAACC,MAAhB,KAA2BC,MAAM,CAACC,IAAP,CAAYT,KAAZ,EAAmBO,MAA9C,IAAwDD,eAAe,CAACC,MAAhB,GAAyB,CAF9F;AAGI,QAAA,aAAa,EAAED,eAAe,CAACC,MAAhB,KAA2BC,MAAM,CAACC,IAAP,CAAYT,KAAZ,EAAmBO,MAA9C,IAAwDD,eAAe,CAACC,MAAhB,GAAyB,CAHpG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAQI,oBAAC,UAAD;AACI,QAAA,SAAS,EAAC,MADd;AAEI,sBAAW,MAFf;AAGI,qBAAWtB,UAAU,GAAG,aAAH,GAAmB,IAH5C;AAII,yBAAc,MAJlB;AAKI,QAAA,OAAO,EAAE,iBAACyB,EAAD;AAAA,iBAAQ,MAAI,CAACtB,cAAL,CAAoBsB,EAApB,EAAwB,YAAxB,CAAR;AAAA,SALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAPJ,CARJ,EAkBI,oBAAC,IAAD;AACI,QAAA,EAAE,EAAC,aADP;AAEI,QAAA,QAAQ,EAAEzB,UAFd;AAGI,QAAA,IAAI,EAAE0B,OAAO,CAAC1B,UAAD,CAHjB;AAII,QAAA,OAAO,EAAE,iBAACyB,EAAD;AAAA,iBAAQ,MAAI,CAACjB,eAAL,CAAqBiB,EAArB,EAAyB,YAAzB,CAAR;AAAA,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMI,oBAAC,QAAD;AACI,QAAA,OAAO,EAAE,iBAACA,EAAD,EAAQ;AACbZ,UAAAA,cAAc;;AACd,UAAA,MAAI,CAACL,eAAL,CAAqBiB,EAArB,EAAyB,YAAzB;AACH,SAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANJ,EAcI,oBAAC,QAAD;AACI,QAAA,OAAO,EAAE,iBAACA,EAAD,EAAQ;AACbX,UAAAA,gBAAgB;;AAChB,UAAA,MAAI,CAACN,eAAL,CAAqBiB,EAArB,EAAyB,YAAzB;AACH,SAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdJ,EAsBI,oBAAC,QAAD;AACI,QAAA,OAAO,EAAE,iBAACA,EAAD,EAAQ;AACbT,UAAAA,sBAAsB,CAAC,MAAD,EAAS,IAAT,CAAtB;;AACA,UAAA,MAAI,CAACR,eAAL,CAAqBiB,EAArB,EAAyB,YAAzB;AACH,SAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtBJ,EA8BI,oBAAC,QAAD;AACI,QAAA,OAAO,EAAE,iBAACA,EAAD,EAAQ;AACbT,UAAAA,sBAAsB,CAAC,MAAD,EAAS,KAAT,CAAtB;;AACA,UAAA,MAAI,CAACR,eAAL,CAAqBiB,EAArB,EAAyB,YAAzB;AACH,SAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA9BJ,EAsCI,oBAAC,QAAD;AACI,QAAA,OAAO,EAAE,iBAACA,EAAD,EAAQ;AACbT,UAAAA,sBAAsB,CAAC,SAAD,EAAY,IAAZ,CAAtB;;AACA,UAAA,MAAI,CAACR,eAAL,CAAqBiB,EAArB,EAAyB,YAAzB;AACH,SAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAtCJ,EA8CI,oBAAC,QAAD;AACI,QAAA,OAAO,EAAE,iBAACA,EAAD,EAAQ;AACbT,UAAAA,sBAAsB,CAAC,SAAD,EAAY,KAAZ,CAAtB;;AACA,UAAA,MAAI,CAACR,eAAL,CAAqBiB,EAArB,EAAyB,YAAzB;AACH,SAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA9CJ,EAsDI,oBAAC,QAAD;AACI,QAAA,OAAO,EAAE,iBAACA,EAAD,EAAQ;AACbT,UAAAA,sBAAsB,CAAC,WAAD,EAAc,IAAd,CAAtB;;AACA,UAAA,MAAI,CAACR,eAAL,CAAqBiB,EAArB,EAAyB,YAAzB;AACH,SAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAtDJ,EA8DI,oBAAC,QAAD;AACI,QAAA,OAAO,EAAE,iBAACA,EAAD,EAAQ;AACbT,UAAAA,sBAAsB,CAAC,WAAD,EAAc,KAAd,CAAtB;;AACA,UAAA,MAAI,CAACR,eAAL,CAAqBiB,EAArB,EAAyB,YAAzB;AACH,SAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA9DJ,CAlBJ,EA0FKJ,eAAe,CAACC,MAAhB,GAAyB,CAAzB,IACG,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI;AAAK,QAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAII,oBAAC,UAAD;AACI,QAAA,OAAO,EAAE,iBAACG,EAAD;AAAA,iBAAQR,wBAAwB,CAAC,CAAD,CAAhC;AAAA,SADb;AAEI,sBAAW,QAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAII,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ,CAJJ,EAWI,oBAAC,UAAD;AACI,sBAAW,MADf;AAEI,qBAAWhB,WAAW,GAAG,cAAH,GAAoB,IAF9C;AAGI,yBAAc,MAHlB;AAII,QAAA,OAAO,EAAE,iBAACwB,EAAD;AAAA,iBAAQ,MAAI,CAACtB,cAAL,CAAoBsB,EAApB,EAAwB,aAAxB,CAAR;AAAA,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANJ,CAXJ,EAoBI,oBAAC,IAAD;AACI,QAAA,EAAE,EAAC,cADP;AAEI,QAAA,QAAQ,EAAExB,WAFd;AAGI,QAAA,IAAI,EAAEyB,OAAO,CAACzB,WAAD,CAHjB;AAII,QAAA,OAAO,EAAE,iBAACwB,EAAD;AAAA,iBAAQ,MAAI,CAACjB,eAAL,CAAqBiB,EAArB,EAAyB,aAAzB,CAAR;AAAA,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMKN,OAAO,CAACG,MAAR,GAAiB,CAAjB,IAAsBH,OAAO,CAACQ,GAAR,CAAY,UAACC,MAAD;AAAA,eAC/B,oBAAC,QAAD;AACI,UAAA,OAAO,EAAE,iBAACH,EAAD,EAAQ;AACbR,YAAAA,wBAAwB,CAACW,MAAM,CAACC,EAAR,CAAxB;;AACA,YAAA,MAAI,CAACrB,eAAL,CAAqBiB,EAArB,EAAyB,aAAzB;AACH,WAJL;AAKI,UAAA,GAAG,EAAEG,MAAM,CAACC,EALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAOKD,MAAM,CAACE,KAPZ,CAD+B;AAAA,OAAZ,CAN3B,CApBJ,EAuCI,oBAAC,UAAD;AACI,sBAAW,MADf;AAEI,qBAAW5B,UAAU,GAAG,aAAH,GAAmB,IAF5C;AAGI,yBAAc,MAHlB;AAII,QAAA,OAAO,EAAE,iBAACuB,EAAD;AAAA,iBAAQ,MAAI,CAACtB,cAAL,CAAoBsB,EAApB,EAAwB,YAAxB,CAAR;AAAA,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANJ,CAvCJ,EAgDI,oBAAC,IAAD;AACI,QAAA,EAAE,EAAC,cADP;AAEI,QAAA,QAAQ,EAAEvB,UAFd;AAGI,QAAA,IAAI,EAAEwB,OAAO,CAACxB,UAAD,CAHjB;AAII,QAAA,OAAO,EAAE,iBAACuB,EAAD;AAAA,iBAAQ,MAAI,CAACjB,eAAL,CAAqBiB,EAArB,EAAyB,YAAzB,CAAR;AAAA,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMKL,MAAM,CAACE,MAAP,GAAgB,CAAhB,IAAqBF,MAAM,CAACO,GAAP,CAAW,UAACI,KAAD;AAAA,eAC7B,oBAAC,QAAD;AACI,UAAA,OAAO,EAAE,iBAACN,EAAD,EAAQ;AACbP,YAAAA,0BAA0B,CAACa,KAAK,CAACF,EAAP,CAA1B;;AACA,YAAA,MAAI,CAACrB,eAAL,CAAqBiB,EAArB,EAAyB,YAAzB;AACH,WAJL;AAKI,UAAA,GAAG,EAAEM,KAAK,CAACF,EALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAOKE,KAAK,CAACD,KAPX,CAD6B;AAAA,OAAX,CAN1B,CAhDJ,CA3FR,CADJ;AAkKH;;;;EA3LqB1C,S;;AA8L1B,SAAS4C,kBAAT,CAA4BC,QAA5B,EACA;AACI,SAAOvC,kBAAkB,CAAC;AACtBmB,IAAAA,cAAc,EAAchB,OAAO,CAACgB,cADd;AAEtBC,IAAAA,gBAAgB,EAAYjB,OAAO,CAACiB,gBAFd;AAGtBE,IAAAA,sBAAsB,EAAMnB,OAAO,CAACmB,sBAHd;AAItBC,IAAAA,wBAAwB,EAAIpB,OAAO,CAACoB,wBAJd;AAKtBC,IAAAA,0BAA0B,EAAErB,OAAO,CAACqB;AALd,GAAD,EAMtBe,QANsB,CAAzB;AAOH;;AAED,SAASC,eAAT,OACA;AAAA,MAD0BC,OAC1B,QAD0BA,OAC1B;AACI,SAAO;AACHpB,IAAAA,KAAK,EAAYoB,OAAO,CAACpB,KAAR,CAAcqB,QAD5B;AAEHf,IAAAA,eAAe,EAAEc,OAAO,CAACpB,KAAR,CAAcM,eAF5B;AAGHF,IAAAA,OAAO,EAAUgB,OAAO,CAAChB,OAHtB;AAIHC,IAAAA,MAAM,EAAWe,OAAO,CAACf,MAJtB;AAKHiB,IAAAA,OAAO,EAAUF,OAAO,CAACE;AALtB,GAAP;AAOH;;AAED,eAAezC,UAAU,CAACD,OAAO,CAACuC,eAAD,EAAkBF,kBAAlB,CAAP,CAA6ClC,WAA7C,CAAD,CAAzB","sourcesContent":["import React, {Component} from 'react';\nimport {Checkbox, Icon, IconButton, Menu, MenuItem} from '@material-ui/core';\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport * as Actions from '../store/actions/index';\n\nclass MailToolbar extends Component {\n\n    state = {\n        selectMenu : null,\n        foldersMenu: null,\n        labelsMenu : null\n    };\n\n    handleMenuOpen = (event, menu) => {\n        this.setState({[menu]: event.currentTarget});\n    };\n\n    handleMenuClose = (event, menu) => {\n        this.setState({[menu]: null});\n    };\n\n    handleChange = () => event => {\n        event.target.checked ? this.props.selectAllMails() : this.props.deselectAllMails();\n    };\n\n    render()\n    {\n        const {mails, selectAllMails, deselectAllMails, selectMailsByParameter, setFolderOnSelectedMails, toggleLabelOnSelectedMails, folders, labels, selectedMailIds} = this.props;\n        const {foldersMenu, selectMenu, labelsMenu} = this.state;\n\n        return (\n            <div className=\"flex flex-1 items-center sm:px-8\">\n\n                <Checkbox\n                    onChange={this.handleChange()}\n                    checked={selectedMailIds.length === Object.keys(mails).length && selectedMailIds.length > 0}\n                    indeterminate={selectedMailIds.length !== Object.keys(mails).length && selectedMailIds.length > 0}\n                />\n\n                <IconButton\n                    className=\"w-24\"\n                    aria-label=\"More\"\n                    aria-owns={selectMenu ? 'select-menu' : null}\n                    aria-haspopup=\"true\"\n                    onClick={(ev) => this.handleMenuOpen(ev, 'selectMenu')}\n                >\n                    <Icon>arrow_drop_down</Icon>\n                </IconButton>\n\n                <Menu\n                    id=\"select-menu\"\n                    anchorEl={selectMenu}\n                    open={Boolean(selectMenu)}\n                    onClose={(ev) => this.handleMenuClose(ev, 'selectMenu')}\n                >\n                    <MenuItem\n                        onClick={(ev) => {\n                            selectAllMails();\n                            this.handleMenuClose(ev, 'selectMenu');\n                        }}\n                    >\n                        All\n                    </MenuItem>\n                    <MenuItem\n                        onClick={(ev) => {\n                            deselectAllMails();\n                            this.handleMenuClose(ev, 'selectMenu')\n                        }}\n                    >\n                        None\n                    </MenuItem>\n                    <MenuItem\n                        onClick={(ev) => {\n                            selectMailsByParameter('read', true);\n                            this.handleMenuClose(ev, 'selectMenu');\n                        }}\n                    >\n                        Read\n                    </MenuItem>\n                    <MenuItem\n                        onClick={(ev) => {\n                            selectMailsByParameter('read', false);\n                            this.handleMenuClose(ev, 'selectMenu');\n                        }}\n                    >\n                        Unread\n                    </MenuItem>\n                    <MenuItem\n                        onClick={(ev) => {\n                            selectMailsByParameter('starred', true);\n                            this.handleMenuClose(ev, 'selectMenu');\n                        }}\n                    >\n                        Starred\n                    </MenuItem>\n                    <MenuItem\n                        onClick={(ev) => {\n                            selectMailsByParameter('starred', false);\n                            this.handleMenuClose(ev, 'selectMenu');\n                        }}\n                    >\n                        Unstarred\n                    </MenuItem>\n                    <MenuItem\n                        onClick={(ev) => {\n                            selectMailsByParameter('important', true);\n                            this.handleMenuClose(ev, 'selectMenu');\n                        }}\n                    >\n                        Important\n                    </MenuItem>\n                    <MenuItem\n                        onClick={(ev) => {\n                            selectMailsByParameter('important', false);\n                            this.handleMenuClose(ev, 'selectMenu');\n                        }}\n                    >\n                        Unimportant\n                    </MenuItem>\n                </Menu>\n\n                {selectedMailIds.length > 0 && (\n                    <React.Fragment>\n\n                        <div className=\"border-r-1 h-48 w-1 mx-12 my-0\"/>\n\n                        <IconButton\n                            onClick={(ev) => setFolderOnSelectedMails(4)}\n                            aria-label=\"Delete\"\n                        >\n                            <Icon>delete</Icon>\n                        </IconButton>\n\n                        <IconButton\n                            aria-label=\"More\"\n                            aria-owns={foldersMenu ? 'folders-menu' : null}\n                            aria-haspopup=\"true\"\n                            onClick={(ev) => this.handleMenuOpen(ev, 'foldersMenu')}\n                        >\n                            <Icon>folder</Icon>\n                        </IconButton>\n\n                        <Menu\n                            id=\"folders-menu\"\n                            anchorEl={foldersMenu}\n                            open={Boolean(foldersMenu)}\n                            onClose={(ev) => this.handleMenuClose(ev, 'foldersMenu')}\n                        >\n                            {folders.length > 0 && folders.map((folder) => (\n                                <MenuItem\n                                    onClick={(ev) => {\n                                        setFolderOnSelectedMails(folder.id);\n                                        this.handleMenuClose(ev, 'foldersMenu')\n                                    }}\n                                    key={folder.id}\n                                >\n                                    {folder.title}\n                                </MenuItem>\n                            ))}\n                        </Menu>\n\n                        <IconButton\n                            aria-label=\"More\"\n                            aria-owns={labelsMenu ? 'labels-menu' : null}\n                            aria-haspopup=\"true\"\n                            onClick={(ev) => this.handleMenuOpen(ev, 'labelsMenu')}\n                        >\n                            <Icon>label</Icon>\n                        </IconButton>\n\n                        <Menu\n                            id=\"folders-menu\"\n                            anchorEl={labelsMenu}\n                            open={Boolean(labelsMenu)}\n                            onClose={(ev) => this.handleMenuClose(ev, 'labelsMenu')}\n                        >\n                            {labels.length > 0 && labels.map((label) => (\n                                <MenuItem\n                                    onClick={(ev) => {\n                                        toggleLabelOnSelectedMails(label.id);\n                                        this.handleMenuClose(ev, 'labelsMenu')\n                                    }}\n                                    key={label.id}\n                                >\n                                    {label.title}\n                                </MenuItem>\n                            ))}\n                        </Menu>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch)\n{\n    return bindActionCreators({\n        selectAllMails            : Actions.selectAllMails,\n        deselectAllMails          : Actions.deselectAllMails,\n        selectMailsByParameter    : Actions.selectMailsByParameter,\n        setFolderOnSelectedMails  : Actions.setFolderOnSelectedMails,\n        toggleLabelOnSelectedMails: Actions.toggleLabelOnSelectedMails\n    }, dispatch);\n}\n\nfunction mapStateToProps({mailApp})\n{\n    return {\n        mails          : mailApp.mails.entities,\n        selectedMailIds: mailApp.mails.selectedMailIds,\n        folders        : mailApp.folders,\n        labels         : mailApp.labels,\n        filters        : mailApp.filters\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MailToolbar));\n"]},"metadata":{},"sourceType":"module"}