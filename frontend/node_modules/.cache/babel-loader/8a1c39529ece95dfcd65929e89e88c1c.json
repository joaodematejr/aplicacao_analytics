{"ast":null,"code":"import axios from 'axios';\nimport { FuseUtils } from '@fuse';\nimport history from 'history.js';\nimport _ from '@lodash';\nimport { showMessage } from 'app/store/actions/fuse';\nimport reorder, { reorderQuoteMap } from './reorder';\nimport * as Actions from './index';\nimport ListModel from '../../model/ListModel';\nimport CardModel from '../../model/CardModel';\nexport var GET_BOARD = '[SCRUMBOARD APP] GET BOARD';\nexport var DELETE_BOARD = '[SCRUMBOARD APP] DELETE BOARD';\nexport var COPY_BOARD = '[SCRUMBOARD APP] COPY BOARD';\nexport var RENAME_BOARD = '[SCRUMBOARD APP] RENAME BOARD';\nexport var CHANGE_BOARD_SETTINGS = '[SCRUMBOARD APP] CHANGE BOARD SETTINGS';\nexport var RESET_BOARD = '[SCRUMBOARD APP] RESET BOARD';\nexport var ORDER_LIST = '[SCRUMBOARD APP] ORDER LIST';\nexport var ORDER_CARD = '[SCRUMBOARD APP] ORDER CARD';\nexport var ADD_CARD = '[SCRUMBOARD APP] ADD CARD';\nexport var ADD_LIST = '[SCRUMBOARD APP] ADD LIST';\nexport var ADD_LABEL = '[SCRUMBOARD APP] ADD LABEL';\nexport var RENAME_LIST = '[SCRUMBOARD APP] RENAME LIST';\nexport var REMOVE_LIST = '[SCRUMBOARD APP] REMOVE LIST';\nexport function getBoard(boardId) {\n  var request = axios.get('/api/scrumboard-app/board', {\n    boardId: boardId\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: GET_BOARD,\n        payload: response.data\n      });\n    }, function (error) {\n      dispatch(showMessage({\n        message: error.response.data,\n        autoHideDuration: 2000,\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        }\n      }));\n      history.push({\n        pathname: '/apps/scrumboard/boards'\n      });\n    });\n  };\n}\nexport function resetBoard() {\n  return {\n    type: RESET_BOARD\n  };\n}\nexport function reorderList(result) {\n  return function (dispatch, getState) {\n    var board = getState().scrumboardApp.board;\n    var lists = board.lists;\n    var ordered = reorder(lists, result.source.index, result.destination.index);\n    var request = axios.post('/api/scrumboard-app/list/order', {\n      boardId: board.id,\n      lists: ordered\n    });\n    request.then(function (response) {\n      dispatch(showMessage({\n        message: 'List Order Saved',\n        autoHideDuration: 2000,\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        }\n      }));\n    });\n    return dispatch({\n      type: ORDER_LIST,\n      payload: ordered\n    });\n  };\n}\nexport function reorderCard(result) {\n  return function (dispatch, getState) {\n    var board = getState().scrumboardApp.board;\n    var lists = board.lists;\n    var ordered = reorderQuoteMap(lists, result.source, result.destination);\n    var request = axios.post('/api/scrumboard-app/card/order', {\n      boardId: board.id,\n      lists: ordered\n    });\n    request.then(function (response) {\n      dispatch(showMessage({\n        message: 'Card Order Saved',\n        autoHideDuration: 2000,\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        }\n      }));\n    });\n    return dispatch({\n      type: ORDER_CARD,\n      payload: ordered\n    });\n  };\n}\nexport function newCard(boardId, listId, cardTitle) {\n  var data = new CardModel({\n    name: cardTitle\n  });\n  var request = axios.post('/api/scrumboard-app/card/new', {\n    boardId: boardId,\n    listId: listId,\n    data: data\n  });\n  return function (dispatch) {\n    return new Promise(function (resolve, reject) {\n      request.then(function (response) {\n        resolve(response.data);\n        return dispatch({\n          type: ADD_CARD,\n          payload: response.data\n        });\n      });\n    });\n  };\n}\nexport function newList(boardId, listTitle) {\n  var data = new ListModel({\n    name: listTitle\n  });\n  var request = axios.post('/api/scrumboard-app/list/new', {\n    boardId: boardId,\n    data: data\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: ADD_LIST,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function renameList(boardId, listId, listTitle) {\n  var request = axios.post('/api/scrumboard-app/list/rename', {\n    boardId: boardId,\n    listId: listId,\n    listTitle: listTitle\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: RENAME_LIST,\n        listId: listId,\n        listTitle: listTitle\n      });\n    });\n  };\n}\nexport function removeList(boardId, listId) {\n  var request = axios.post('/api/scrumboard-app/list/remove', {\n    boardId: boardId,\n    listId: listId\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: REMOVE_LIST,\n        listId: listId\n      });\n    });\n  };\n}\nexport function addLabel(label) {\n  return function (dispatch) {\n    return dispatch({\n      type: ADD_LABEL,\n      payload: label\n    });\n  };\n}\nexport function changeBoardSettings(newSettings) {\n  return function (dispatch, getState) {\n    var board = getState().scrumboardApp.board;\n\n    var settings = _.merge(board.settings, newSettings);\n\n    var request = axios.post('/api/scrumboard-app/board/settings/update', {\n      boardId: board.id,\n      settings: settings\n    });\n    return request.then(function (response) {\n      return dispatch({\n        type: CHANGE_BOARD_SETTINGS,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function deleteBoard(boardId) {\n  var request = axios.post('/api/scrumboard-app/board/delete', {\n    boardId: boardId\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      history.push({\n        pathname: '/apps/scrumboard/boards'\n      });\n      return dispatch({\n        type: DELETE_BOARD\n      });\n    });\n  };\n}\nexport function copyBoard(board) {\n  var newBoard = _.merge(board, {\n    id: FuseUtils.generateGUID(),\n    name: board.name + ' (Copied)',\n    uri: board.uri + '-copied'\n  });\n\n  return function (dispatch) {\n    dispatch(Actions.newBoard(newBoard));\n    return {\n      type: COPY_BOARD\n    };\n  };\n}\nexport function renameBoard(boardId, boardTitle) {\n  var request = axios.post('/api/scrumboard-app/board/rename', {\n    boardId: boardId,\n    boardTitle: boardTitle\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: RENAME_BOARD,\n        boardTitle: boardTitle\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/src/app/main/apps/scrumboard/store/actions/board.actions.js"],"names":["axios","FuseUtils","history","_","showMessage","reorder","reorderQuoteMap","Actions","ListModel","CardModel","GET_BOARD","DELETE_BOARD","COPY_BOARD","RENAME_BOARD","CHANGE_BOARD_SETTINGS","RESET_BOARD","ORDER_LIST","ORDER_CARD","ADD_CARD","ADD_LIST","ADD_LABEL","RENAME_LIST","REMOVE_LIST","getBoard","boardId","request","get","dispatch","then","response","type","payload","data","error","message","autoHideDuration","anchorOrigin","vertical","horizontal","push","pathname","resetBoard","reorderList","result","getState","board","scrumboardApp","lists","ordered","source","index","destination","post","id","reorderCard","newCard","listId","cardTitle","name","Promise","resolve","reject","newList","listTitle","renameList","removeList","addLabel","label","changeBoardSettings","newSettings","settings","merge","deleteBoard","copyBoard","newBoard","generateGUID","uri","renameBoard","boardTitle"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {FuseUtils} from '@fuse';\nimport history from 'history.js';\nimport _ from '@lodash';\nimport {showMessage} from 'app/store/actions/fuse';\nimport reorder, {reorderQuoteMap} from './reorder';\nimport * as Actions from './index';\nimport ListModel from '../../model/ListModel';\nimport CardModel from '../../model/CardModel';\n\nexport const GET_BOARD = '[SCRUMBOARD APP] GET BOARD';\nexport const DELETE_BOARD = '[SCRUMBOARD APP] DELETE BOARD';\nexport const COPY_BOARD = '[SCRUMBOARD APP] COPY BOARD';\nexport const RENAME_BOARD = '[SCRUMBOARD APP] RENAME BOARD';\nexport const CHANGE_BOARD_SETTINGS = '[SCRUMBOARD APP] CHANGE BOARD SETTINGS';\nexport const RESET_BOARD = '[SCRUMBOARD APP] RESET BOARD';\nexport const ORDER_LIST = '[SCRUMBOARD APP] ORDER LIST';\nexport const ORDER_CARD = '[SCRUMBOARD APP] ORDER CARD';\nexport const ADD_CARD = '[SCRUMBOARD APP] ADD CARD';\nexport const ADD_LIST = '[SCRUMBOARD APP] ADD LIST';\nexport const ADD_LABEL = '[SCRUMBOARD APP] ADD LABEL';\nexport const RENAME_LIST = '[SCRUMBOARD APP] RENAME LIST';\nexport const REMOVE_LIST = '[SCRUMBOARD APP] REMOVE LIST';\n\nexport function getBoard(boardId)\n{\n    const request = axios.get('/api/scrumboard-app/board', {boardId});\n\n    return (dispatch) =>\n        request.then(\n            (response) =>\n                dispatch({\n                    type   : GET_BOARD,\n                    payload: response.data\n                }),\n            (error) => {\n                dispatch(showMessage({\n                    message         : error.response.data,\n                    autoHideDuration: 2000,\n                    anchorOrigin    : {\n                        vertical  : 'top',\n                        horizontal: 'right'\n                    }\n                }));\n                history.push({\n                    pathname: '/apps/scrumboard/boards'\n                });\n            });\n}\n\nexport function resetBoard()\n{\n    return {\n        type: RESET_BOARD\n    };\n}\n\nexport function reorderList(result)\n{\n    return (dispatch, getState) => {\n\n        const {board} = getState().scrumboardApp;\n        const {lists} = board;\n\n        const ordered = reorder(\n            lists,\n            result.source.index,\n            result.destination.index\n        );\n\n        const request = axios.post('/api/scrumboard-app/list/order',\n            {\n                boardId: board.id,\n                lists  : ordered\n            }\n        );\n\n        request.then((response) => {\n            dispatch(showMessage({\n                message         : 'List Order Saved',\n                autoHideDuration: 2000,\n                anchorOrigin    : {\n                    vertical  : 'top',\n                    horizontal: 'right'\n                }\n            }));\n        });\n\n        return dispatch({\n            type   : ORDER_LIST,\n            payload: ordered\n        });\n    }\n}\n\nexport function reorderCard(result)\n{\n    return (dispatch, getState) => {\n\n        const {board} = getState().scrumboardApp;\n        const {lists} = board;\n\n        const ordered = reorderQuoteMap(\n            lists,\n            result.source,\n            result.destination\n        );\n\n        const request = axios.post('/api/scrumboard-app/card/order',\n            {\n                boardId: board.id,\n                lists  : ordered\n            }\n        );\n\n        request.then((response) => {\n            dispatch(showMessage({\n                message         : 'Card Order Saved',\n                autoHideDuration: 2000,\n                anchorOrigin    : {\n                    vertical  : 'top',\n                    horizontal: 'right'\n                }\n            }));\n        });\n\n        return dispatch({\n            type   : ORDER_CARD,\n            payload: ordered\n        });\n    }\n}\n\nexport function newCard(boardId, listId, cardTitle)\n{\n    const data = new CardModel({name: cardTitle});\n\n    const request = axios.post('/api/scrumboard-app/card/new',\n        {\n            boardId,\n            listId,\n            data\n        }\n    );\n    return (dispatch) =>\n        new Promise((resolve, reject) => {\n            request.then((response) => {\n                resolve(response.data);\n                return dispatch({\n                    type   : ADD_CARD,\n                    payload: response.data\n                });\n            });\n        });\n}\n\n\nexport function newList(boardId, listTitle)\n{\n    const data = new ListModel({name: listTitle});\n\n    const request = axios.post('/api/scrumboard-app/list/new',\n        {\n            boardId,\n            data\n        }\n    );\n\n    return (dispatch) =>\n        request.then((response) =>\n            dispatch({\n                type   : ADD_LIST,\n                payload: response.data\n            })\n        );\n}\n\nexport function renameList(boardId, listId, listTitle)\n{\n    const request = axios.post('/api/scrumboard-app/list/rename',\n        {\n            boardId,\n            listId,\n            listTitle\n        }\n    );\n\n    return (dispatch) =>\n        request.then((response) =>\n            dispatch({\n                type: RENAME_LIST,\n                listId,\n                listTitle\n            })\n        );\n}\n\nexport function removeList(boardId, listId)\n{\n    const request = axios.post('/api/scrumboard-app/list/remove',\n        {\n            boardId,\n            listId\n        }\n    );\n\n    return (dispatch) =>\n        request.then((response) =>\n            dispatch({\n                type: REMOVE_LIST,\n                listId\n            })\n        );\n}\n\nexport function addLabel(label)\n{\n    return (dispatch) => {\n        return dispatch({\n            type   : ADD_LABEL,\n            payload: label\n        })\n    }\n}\n\nexport function changeBoardSettings(newSettings)\n{\n    return (dispatch, getState) => {\n        const {board} = getState().scrumboardApp;\n        const settings = _.merge(board.settings, newSettings);\n        const request = axios.post('/api/scrumboard-app/board/settings/update',\n            {\n                boardId: board.id,\n                settings\n            }\n        );\n\n        return request.then((response) =>\n            dispatch({\n                type   : CHANGE_BOARD_SETTINGS,\n                payload: response.data\n            })\n        );\n    }\n}\n\nexport function deleteBoard(boardId)\n{\n    const request = axios.post('/api/scrumboard-app/board/delete',\n        {\n            boardId\n        }\n    );\n\n    return (dispatch) =>\n        request.then((response) => {\n\n            history.push({\n                pathname: '/apps/scrumboard/boards'\n            });\n\n            return dispatch({\n                type: DELETE_BOARD\n            });\n        })\n}\n\nexport function copyBoard(board)\n{\n    const newBoard = _.merge(board, {\n        id  : FuseUtils.generateGUID(),\n        name: board.name + ' (Copied)',\n        uri : board.uri + '-copied'\n    });\n    return (dispatch) => {\n        dispatch(Actions.newBoard(newBoard));\n        return {type: COPY_BOARD};\n    }\n}\n\nexport function renameBoard(boardId, boardTitle)\n{\n    const request = axios.post('/api/scrumboard-app/board/rename',\n        {\n            boardId,\n            boardTitle\n        }\n    );\n\n    return (dispatch) =>\n        request.then((response) =>\n            dispatch({\n                type: RENAME_BOARD,\n                boardTitle\n            }));\n}\n"]},"metadata":{},"sourceType":"module"}