{"ast":null,"code":"import _classCallCheck from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/src/app/main/apps/contacts/ContactsList.js\";\nimport React, { Component } from 'react';\nimport { Avatar, Checkbox, Icon, IconButton, ListItemIcon, ListItemText, Menu, MenuItem, MenuList, Typography } from '@material-ui/core';\nimport { FuseUtils, FuseAnimate } from '@fuse';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport ReactTable from \"react-table\";\nimport * as Actions from './store/actions';\n\nvar ContactsList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactsList, _Component);\n\n  function ContactsList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactsList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactsList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedContactsMenu: null\n    };\n\n    _this.getFilteredArray = function (entities, searchText) {\n      var arr = Object.keys(entities).map(function (id) {\n        return entities[id];\n      });\n\n      if (searchText.length === 0) {\n        return arr;\n      }\n\n      return FuseUtils.filterArrayByString(arr, searchText);\n    };\n\n    _this.openSelectedContactMenu = function (event) {\n      _this.setState({\n        selectedContactsMenu: event.currentTarget\n      });\n    };\n\n    _this.closeSelectedContactsMenu = function () {\n      _this.setState({\n        selectedContactsMenu: null\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactsList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          contacts = _this$props.contacts,\n          user = _this$props.user,\n          searchText = _this$props.searchText,\n          selectedContactIds = _this$props.selectedContactIds,\n          selectAllContacts = _this$props.selectAllContacts,\n          deSelectAllContacts = _this$props.deSelectAllContacts,\n          toggleInSelectedContacts = _this$props.toggleInSelectedContacts,\n          openEditContactDialog = _this$props.openEditContactDialog,\n          removeContacts = _this$props.removeContacts,\n          removeContact = _this$props.removeContact,\n          toggleStarredContact = _this$props.toggleStarredContact,\n          setContactsUnstarred = _this$props.setContactsUnstarred,\n          setContactsStarred = _this$props.setContactsStarred;\n      var data = this.getFilteredArray(contacts, searchText);\n      var selectedContactsMenu = this.state.selectedContactsMenu;\n\n      if (!data && data.length === 0) {\n        return React.createElement(\"div\", {\n          className: \"flex items-center justify-center h-full\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          color: \"textSecondary\",\n          variant: \"h5\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, \"There are no contacts!\"));\n      }\n\n      return React.createElement(FuseAnimate, {\n        animation: \"transition.slideUpIn\",\n        delay: 300,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(ReactTable, {\n        className: \"-striped -highlight border-0\",\n        getTrProps: function getTrProps(state, rowInfo, column) {\n          return {\n            className: \"cursor-pointer\",\n            onClick: function onClick(e, handleOriginal) {\n              if (rowInfo) {\n                openEditContactDialog(rowInfo.original);\n              }\n            }\n          };\n        },\n        data: data,\n        columns: [{\n          Header: function Header() {\n            return React.createElement(Checkbox, {\n              onClick: function onClick(event) {\n                event.stopPropagation();\n              },\n              onChange: function onChange(event) {\n                event.target.checked ? selectAllContacts() : deSelectAllContacts();\n              },\n              checked: selectedContactIds.length === Object.keys(contacts).length && selectedContactIds.length > 0,\n              indeterminate: selectedContactIds.length !== Object.keys(contacts).length && selectedContactIds.length > 0,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 69\n              },\n              __self: this\n            });\n          },\n          accessor: \"\",\n          Cell: function Cell(row) {\n            return React.createElement(Checkbox, {\n              onClick: function onClick(event) {\n                event.stopPropagation();\n              },\n              checked: selectedContactIds.includes(row.value.id),\n              onChange: function onChange() {\n                return toggleInSelectedContacts(row.value.id);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 82\n              },\n              __self: this\n            });\n          },\n          className: \"justify-center\",\n          sortable: false,\n          width: 64\n        }, {\n          Header: function Header() {\n            return selectedContactIds.length > 0 && React.createElement(React.Fragment, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 98\n              },\n              __self: this\n            }, React.createElement(IconButton, {\n              \"aria-owns\": selectedContactsMenu ? 'selectedContactsMenu' : null,\n              \"aria-haspopup\": \"true\",\n              onClick: _this2.openSelectedContactMenu,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 99\n              },\n              __self: this\n            }, React.createElement(Icon, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 104\n              },\n              __self: this\n            }, \"more_horiz\")), React.createElement(Menu, {\n              id: \"selectedContactsMenu\",\n              anchorEl: selectedContactsMenu,\n              open: Boolean(selectedContactsMenu),\n              onClose: _this2.closeSelectedContactsMenu,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 106\n              },\n              __self: this\n            }, React.createElement(MenuList, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 112\n              },\n              __self: this\n            }, React.createElement(MenuItem, {\n              onClick: function onClick() {\n                removeContacts(selectedContactIds);\n\n                _this2.closeSelectedContactsMenu();\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 113\n              },\n              __self: this\n            }, React.createElement(ListItemIcon, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 119\n              },\n              __self: this\n            }, React.createElement(Icon, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 120\n              },\n              __self: this\n            }, \"delete\")), React.createElement(ListItemText, {\n              inset: true,\n              primary: \"Remove\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 122\n              },\n              __self: this\n            })), React.createElement(MenuItem, {\n              onClick: function onClick() {\n                setContactsStarred(selectedContactIds);\n\n                _this2.closeSelectedContactsMenu();\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 124\n              },\n              __self: this\n            }, React.createElement(ListItemIcon, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 130\n              },\n              __self: this\n            }, React.createElement(Icon, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 131\n              },\n              __self: this\n            }, \"star\")), React.createElement(ListItemText, {\n              inset: true,\n              primary: \"Starred\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 133\n              },\n              __self: this\n            })), React.createElement(MenuItem, {\n              onClick: function onClick() {\n                setContactsUnstarred(selectedContactIds);\n\n                _this2.closeSelectedContactsMenu();\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 135\n              },\n              __self: this\n            }, React.createElement(ListItemIcon, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 141\n              },\n              __self: this\n            }, React.createElement(Icon, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 142\n              },\n              __self: this\n            }, \"star_border\")), React.createElement(ListItemText, {\n              inset: true,\n              primary: \"Unstarred\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 144\n              },\n              __self: this\n            })))));\n          },\n          accessor: \"avatar\",\n          Cell: function Cell(row) {\n            return React.createElement(Avatar, {\n              className: \"mr-8\",\n              alt: row.original.name,\n              src: row.value,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 153\n              },\n              __self: this\n            });\n          },\n          className: \"justify-center\",\n          width: 64,\n          sortable: false\n        }, {\n          Header: \"First Name\",\n          accessor: \"name\",\n          filterable: true,\n          className: \"font-bold\"\n        }, {\n          Header: \"Last Name\",\n          accessor: \"lastName\",\n          filterable: true,\n          className: \"font-bold\"\n        }, {\n          Header: \"Company\",\n          accessor: \"company\",\n          filterable: true\n        }, {\n          Header: \"Job Title\",\n          accessor: \"jobTitle\",\n          filterable: true\n        }, {\n          Header: \"Email\",\n          accessor: \"email\",\n          filterable: true\n        }, {\n          Header: \"Phone\",\n          accessor: \"phone\",\n          filterable: true\n        }, {\n          Header: \"\",\n          width: 128,\n          Cell: function Cell(row) {\n            return React.createElement(\"div\", {\n              className: \"flex items-center\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 195\n              },\n              __self: this\n            }, React.createElement(IconButton, {\n              onClick: function onClick(ev) {\n                ev.stopPropagation();\n                toggleStarredContact(row.original.id);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 196\n              },\n              __self: this\n            }, user.starred && user.starred.includes(row.original.id) ? React.createElement(Icon, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 203\n              },\n              __self: this\n            }, \"star\") : React.createElement(Icon, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 205\n              },\n              __self: this\n            }, \"star_border\")), React.createElement(IconButton, {\n              onClick: function onClick(ev) {\n                ev.stopPropagation();\n                removeContact(row.original.id);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 208\n              },\n              __self: this\n            }, React.createElement(Icon, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 214\n              },\n              __self: this\n            }, \"delete\")));\n          }\n        }],\n        defaultPageSize: 10,\n        noDataText: \"No contacts found\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ContactsList;\n}(Component);\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getContacts: Actions.getContacts,\n    getUserData: Actions.getUserData,\n    toggleInSelectedContacts: Actions.toggleInSelectedContacts,\n    selectAllContacts: Actions.selectAllContacts,\n    deSelectAllContacts: Actions.deSelectAllContacts,\n    openEditContactDialog: Actions.openEditContactDialog,\n    removeContacts: Actions.removeContacts,\n    removeContact: Actions.removeContact,\n    toggleStarredContact: Actions.toggleStarredContact,\n    toggleStarredContacts: Actions.toggleStarredContacts,\n    setContactsStarred: Actions.setContactsStarred,\n    setContactsUnstarred: Actions.setContactsUnstarred\n  }, dispatch);\n}\n\nfunction mapStateToProps(_ref) {\n  var contactsApp = _ref.contactsApp;\n  return {\n    contacts: contactsApp.contacts.entities,\n    selectedContactIds: contactsApp.contacts.selectedContactIds,\n    searchText: contactsApp.contacts.searchText,\n    user: contactsApp.user\n  };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ContactsList));","map":{"version":3,"sources":["/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/src/app/main/apps/contacts/ContactsList.js"],"names":["React","Component","Avatar","Checkbox","Icon","IconButton","ListItemIcon","ListItemText","Menu","MenuItem","MenuList","Typography","FuseUtils","FuseAnimate","connect","withRouter","bindActionCreators","ReactTable","Actions","ContactsList","state","selectedContactsMenu","getFilteredArray","entities","searchText","arr","Object","keys","map","id","length","filterArrayByString","openSelectedContactMenu","event","setState","currentTarget","closeSelectedContactsMenu","props","contacts","user","selectedContactIds","selectAllContacts","deSelectAllContacts","toggleInSelectedContacts","openEditContactDialog","removeContacts","removeContact","toggleStarredContact","setContactsUnstarred","setContactsStarred","data","rowInfo","column","className","onClick","e","handleOriginal","original","Header","stopPropagation","target","checked","accessor","Cell","row","includes","value","sortable","width","Boolean","name","filterable","ev","starred","mapDispatchToProps","dispatch","getContacts","getUserData","toggleStarredContacts","mapStateToProps","contactsApp"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,MAAR,EAAgBC,QAAhB,EAA0BC,IAA1B,EAAgCC,UAAhC,EAA4CC,YAA5C,EAA0DC,YAA1D,EAAwEC,IAAxE,EAA8EC,QAA9E,EAAwFC,QAAxF,EAAkGC,UAAlG,QAAmH,mBAAnH;AACA,SAAQC,SAAR,EAAmBC,WAAnB,QAAqC,OAArC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,iBAAzB;;IAEMC,Y;;;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACJC,MAAAA,oBAAoB,EAAE;AADlB,K;;UAIRC,gB,GAAmB,UAACC,QAAD,EAAWC,UAAX,EAA0B;AACzC,UAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA0B,UAACC,EAAD;AAAA,eAAQN,QAAQ,CAACM,EAAD,CAAhB;AAAA,OAA1B,CAAZ;;AACA,UAAKL,UAAU,CAACM,MAAX,KAAsB,CAA3B,EACA;AACI,eAAOL,GAAP;AACH;;AACD,aAAOb,SAAS,CAACmB,mBAAV,CAA8BN,GAA9B,EAAmCD,UAAnC,CAAP;AACH,K;;UAEDQ,uB,GAA0B,UAACC,KAAD,EAAW;AACjC,YAAKC,QAAL,CAAc;AAACb,QAAAA,oBAAoB,EAAEY,KAAK,CAACE;AAA7B,OAAd;AACH,K;;UAEDC,yB,GAA4B,YAAM;AAC9B,YAAKF,QAAL,CAAc;AAACb,QAAAA,oBAAoB,EAAE;AAAvB,OAAd;AACH,K;;;;;;;6BAGD;AAAA;;AAAA,wBACsP,KAAKgB,KAD3P;AAAA,UACYC,QADZ,eACYA,QADZ;AAAA,UACsBC,IADtB,eACsBA,IADtB;AAAA,UAC4Bf,UAD5B,eAC4BA,UAD5B;AAAA,UACwCgB,kBADxC,eACwCA,kBADxC;AAAA,UAC4DC,iBAD5D,eAC4DA,iBAD5D;AAAA,UAC+EC,mBAD/E,eAC+EA,mBAD/E;AAAA,UACoGC,wBADpG,eACoGA,wBADpG;AAAA,UAC8HC,qBAD9H,eAC8HA,qBAD9H;AAAA,UACqJC,cADrJ,eACqJA,cADrJ;AAAA,UACqKC,aADrK,eACqKA,aADrK;AAAA,UACoLC,oBADpL,eACoLA,oBADpL;AAAA,UAC0MC,oBAD1M,eAC0MA,oBAD1M;AAAA,UACgOC,kBADhO,eACgOA,kBADhO;AAEI,UAAMC,IAAI,GAAG,KAAK5B,gBAAL,CAAsBgB,QAAtB,EAAgCd,UAAhC,CAAb;AAFJ,UAGWH,oBAHX,GAGmC,KAAKD,KAHxC,CAGWC,oBAHX;;AAKI,UAAK,CAAC6B,IAAD,IAASA,IAAI,CAACpB,MAAL,KAAgB,CAA9B,EACA;AACI,eACI;AAAK,UAAA,SAAS,EAAC,yCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,UAAD;AAAY,UAAA,KAAK,EAAC,eAAlB;AAAkC,UAAA,OAAO,EAAC,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADJ,CADJ;AAOH;;AAED,aACI,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAC,sBAAvB;AAA8C,QAAA,KAAK,EAAE,GAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AACI,QAAA,SAAS,EAAC,8BADd;AAEI,QAAA,UAAU,EAAE,oBAACV,KAAD,EAAQ+B,OAAR,EAAiBC,MAAjB,EAA4B;AACpC,iBAAO;AACHC,YAAAA,SAAS,EAAE,gBADR;AAEHC,YAAAA,OAAO,EAAI,iBAACC,CAAD,EAAIC,cAAJ,EAAuB;AAC9B,kBAAKL,OAAL,EACA;AACIP,gBAAAA,qBAAqB,CAACO,OAAO,CAACM,QAAT,CAArB;AACH;AACJ;AAPE,WAAP;AASH,SAZL;AAaI,QAAA,IAAI,EAAEP,IAbV;AAcI,QAAA,OAAO,EAAE,CACL;AACIQ,UAAAA,MAAM,EAAK;AAAA,mBACP,oBAAC,QAAD;AACI,cAAA,OAAO,EAAE,iBAACzB,KAAD,EAAW;AAChBA,gBAAAA,KAAK,CAAC0B,eAAN;AACH,eAHL;AAII,cAAA,QAAQ,EAAE,kBAAC1B,KAAD,EAAW;AACjBA,gBAAAA,KAAK,CAAC2B,MAAN,CAAaC,OAAb,GAAuBpB,iBAAiB,EAAxC,GAA6CC,mBAAmB,EAAhE;AACH,eANL;AAOI,cAAA,OAAO,EAAEF,kBAAkB,CAACV,MAAnB,KAA8BJ,MAAM,CAACC,IAAP,CAAYW,QAAZ,EAAsBR,MAApD,IAA8DU,kBAAkB,CAACV,MAAnB,GAA4B,CAPvG;AAQI,cAAA,aAAa,EAAEU,kBAAkB,CAACV,MAAnB,KAA8BJ,MAAM,CAACC,IAAP,CAAYW,QAAZ,EAAsBR,MAApD,IAA8DU,kBAAkB,CAACV,MAAnB,GAA4B,CAR7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADO;AAAA,WADf;AAaIgC,UAAAA,QAAQ,EAAG,EAbf;AAcIC,UAAAA,IAAI,EAAO,cAAAC,GAAG,EAAI;AACd,mBAAQ,oBAAC,QAAD;AACA,cAAA,OAAO,EAAE,iBAAC/B,KAAD,EAAW;AAChBA,gBAAAA,KAAK,CAAC0B,eAAN;AACH,eAHD;AAIA,cAAA,OAAO,EAAEnB,kBAAkB,CAACyB,QAAnB,CAA4BD,GAAG,CAACE,KAAJ,CAAUrC,EAAtC,CAJT;AAKA,cAAA,QAAQ,EAAE;AAAA,uBAAMc,wBAAwB,CAACqB,GAAG,CAACE,KAAJ,CAAUrC,EAAX,CAA9B;AAAA,eALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAR;AAQH,WAvBL;AAwBIwB,UAAAA,SAAS,EAAE,gBAxBf;AAyBIc,UAAAA,QAAQ,EAAG,KAzBf;AA0BIC,UAAAA,KAAK,EAAM;AA1Bf,SADK,EA6BL;AACIV,UAAAA,MAAM,EAAK;AAAA,mBACPlB,kBAAkB,CAACV,MAAnB,GAA4B,CAA5B,IACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACI,oBAAC,UAAD;AACI,2BAAWT,oBAAoB,GAAG,sBAAH,GAA4B,IAD/D;AAEI,+BAAc,MAFlB;AAGI,cAAA,OAAO,EAAE,MAAI,CAACW,uBAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAKI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BALJ,CADJ,EAQI,oBAAC,IAAD;AACI,cAAA,EAAE,EAAC,sBADP;AAEI,cAAA,QAAQ,EAAEX,oBAFd;AAGI,cAAA,IAAI,EAAEgD,OAAO,CAAChD,oBAAD,CAHjB;AAII,cAAA,OAAO,EAAE,MAAI,CAACe,yBAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAMI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACI,oBAAC,QAAD;AACI,cAAA,OAAO,EAAE,mBAAM;AACXS,gBAAAA,cAAc,CAACL,kBAAD,CAAd;;AACA,gBAAA,MAAI,CAACJ,yBAAL;AACH,eAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAMI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CANJ,EASI,oBAAC,YAAD;AAAc,cAAA,KAAK,MAAnB;AAAoB,cAAA,OAAO,EAAC,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ,CADJ,EAYI,oBAAC,QAAD;AACI,cAAA,OAAO,EAAE,mBAAM;AACXa,gBAAAA,kBAAkB,CAACT,kBAAD,CAAlB;;AACA,gBAAA,MAAI,CAACJ,yBAAL;AACH,eAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAMI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CANJ,EASI,oBAAC,YAAD;AAAc,cAAA,KAAK,MAAnB;AAAoB,cAAA,OAAO,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ,CAZJ,EAuBI,oBAAC,QAAD;AACI,cAAA,OAAO,EAAE,mBAAM;AACXY,gBAAAA,oBAAoB,CAACR,kBAAD,CAApB;;AACA,gBAAA,MAAI,CAACJ,yBAAL;AACH,eAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAMI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,CANJ,EASI,oBAAC,YAAD;AAAc,cAAA,KAAK,MAAnB;AAAoB,cAAA,OAAO,EAAC,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ,CAvBJ,CANJ,CARJ,CAFG;AAAA,WADf;AAwDI0B,UAAAA,QAAQ,EAAG,QAxDf;AAyDIC,UAAAA,IAAI,EAAO,cAAAC,GAAG;AAAA,mBACV,oBAAC,MAAD;AAAQ,cAAA,SAAS,EAAC,MAAlB;AAAyB,cAAA,GAAG,EAAEA,GAAG,CAACP,QAAJ,CAAaa,IAA3C;AAAiD,cAAA,GAAG,EAAEN,GAAG,CAACE,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADU;AAAA,WAzDlB;AA4DIb,UAAAA,SAAS,EAAE,gBA5Df;AA6DIe,UAAAA,KAAK,EAAM,EA7Df;AA8DID,UAAAA,QAAQ,EAAG;AA9Df,SA7BK,EA6FL;AACIT,UAAAA,MAAM,EAAM,YADhB;AAEII,UAAAA,QAAQ,EAAI,MAFhB;AAGIS,UAAAA,UAAU,EAAE,IAHhB;AAIIlB,UAAAA,SAAS,EAAG;AAJhB,SA7FK,EAmGL;AACIK,UAAAA,MAAM,EAAM,WADhB;AAEII,UAAAA,QAAQ,EAAI,UAFhB;AAGIS,UAAAA,UAAU,EAAE,IAHhB;AAIIlB,UAAAA,SAAS,EAAG;AAJhB,SAnGK,EAyGL;AACIK,UAAAA,MAAM,EAAM,SADhB;AAEII,UAAAA,QAAQ,EAAI,SAFhB;AAGIS,UAAAA,UAAU,EAAE;AAHhB,SAzGK,EA8GL;AACIb,UAAAA,MAAM,EAAM,WADhB;AAEII,UAAAA,QAAQ,EAAI,UAFhB;AAGIS,UAAAA,UAAU,EAAE;AAHhB,SA9GK,EAmHL;AACIb,UAAAA,MAAM,EAAM,OADhB;AAEII,UAAAA,QAAQ,EAAI,OAFhB;AAGIS,UAAAA,UAAU,EAAE;AAHhB,SAnHK,EAwHL;AACIb,UAAAA,MAAM,EAAM,OADhB;AAEII,UAAAA,QAAQ,EAAI,OAFhB;AAGIS,UAAAA,UAAU,EAAE;AAHhB,SAxHK,EA6HL;AACIb,UAAAA,MAAM,EAAE,EADZ;AAEIU,UAAAA,KAAK,EAAG,GAFZ;AAGIL,UAAAA,IAAI,EAAI,cAAAC,GAAG;AAAA,mBACP;AAAK,cAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACI,oBAAC,UAAD;AACI,cAAA,OAAO,EAAE,iBAACQ,EAAD,EAAQ;AACbA,gBAAAA,EAAE,CAACb,eAAH;AACAZ,gBAAAA,oBAAoB,CAACiB,GAAG,CAACP,QAAJ,CAAa5B,EAAd,CAApB;AACH,eAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAMKU,IAAI,CAACkC,OAAL,IAAgBlC,IAAI,CAACkC,OAAL,CAAaR,QAAb,CAAsBD,GAAG,CAACP,QAAJ,CAAa5B,EAAnC,CAAhB,GACG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADH,GAGG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BATR,CADJ,EAaI,oBAAC,UAAD;AACI,cAAA,OAAO,EAAE,iBAAC2C,EAAD,EAAQ;AACbA,gBAAAA,EAAE,CAACb,eAAH;AACAb,gBAAAA,aAAa,CAACkB,GAAG,CAACP,QAAJ,CAAa5B,EAAd,CAAb;AACH,eAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAMI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANJ,CAbJ,CADO;AAAA;AAHf,SA7HK,CAdb;AAwKI,QAAA,eAAe,EAAE,EAxKrB;AAyKI,QAAA,UAAU,EAAC,mBAzKf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AA+KH;;;;EAvNsB5B,S;;AA2N3B,SAASyE,kBAAT,CAA4BC,QAA5B,EACA;AACI,SAAO3D,kBAAkB,CAAC;AACtB4D,IAAAA,WAAW,EAAe1D,OAAO,CAAC0D,WADZ;AAEtBC,IAAAA,WAAW,EAAe3D,OAAO,CAAC2D,WAFZ;AAGtBlC,IAAAA,wBAAwB,EAAEzB,OAAO,CAACyB,wBAHZ;AAItBF,IAAAA,iBAAiB,EAASvB,OAAO,CAACuB,iBAJZ;AAKtBC,IAAAA,mBAAmB,EAAOxB,OAAO,CAACwB,mBALZ;AAMtBE,IAAAA,qBAAqB,EAAK1B,OAAO,CAAC0B,qBANZ;AAOtBC,IAAAA,cAAc,EAAY3B,OAAO,CAAC2B,cAPZ;AAQtBC,IAAAA,aAAa,EAAa5B,OAAO,CAAC4B,aARZ;AAStBC,IAAAA,oBAAoB,EAAM7B,OAAO,CAAC6B,oBATZ;AAUtB+B,IAAAA,qBAAqB,EAAK5D,OAAO,CAAC4D,qBAVZ;AAWtB7B,IAAAA,kBAAkB,EAAQ/B,OAAO,CAAC+B,kBAXZ;AAYtBD,IAAAA,oBAAoB,EAAM9B,OAAO,CAAC8B;AAZZ,GAAD,EAatB2B,QAbsB,CAAzB;AAcH;;AAED,SAASI,eAAT,OACA;AAAA,MAD0BC,WAC1B,QAD0BA,WAC1B;AACI,SAAO;AACH1C,IAAAA,QAAQ,EAAY0C,WAAW,CAAC1C,QAAZ,CAAqBf,QADtC;AAEHiB,IAAAA,kBAAkB,EAAEwC,WAAW,CAAC1C,QAAZ,CAAqBE,kBAFtC;AAGHhB,IAAAA,UAAU,EAAUwD,WAAW,CAAC1C,QAAZ,CAAqBd,UAHtC;AAIHe,IAAAA,IAAI,EAAgByC,WAAW,CAACzC;AAJ7B,GAAP;AAMH;;AAED,eAAexB,UAAU,CAACD,OAAO,CAACiE,eAAD,EAAkBL,kBAAlB,CAAP,CAA6CvD,YAA7C,CAAD,CAAzB","sourcesContent":["import React, {Component} from 'react';\nimport {Avatar, Checkbox, Icon, IconButton, ListItemIcon, ListItemText, Menu, MenuItem, MenuList, Typography} from '@material-ui/core';\nimport {FuseUtils, FuseAnimate} from '@fuse';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {bindActionCreators} from 'redux';\nimport ReactTable from \"react-table\";\nimport * as Actions from './store/actions';\n\nclass ContactsList extends Component {\n\n    state = {\n        selectedContactsMenu: null\n    };\n\n    getFilteredArray = (entities, searchText) => {\n        const arr = Object.keys(entities).map((id) => entities[id]);\n        if ( searchText.length === 0 )\n        {\n            return arr;\n        }\n        return FuseUtils.filterArrayByString(arr, searchText);\n    };\n\n    openSelectedContactMenu = (event) => {\n        this.setState({selectedContactsMenu: event.currentTarget});\n    };\n\n    closeSelectedContactsMenu = () => {\n        this.setState({selectedContactsMenu: null});\n    };\n\n    render()\n    {\n        const { contacts, user, searchText, selectedContactIds, selectAllContacts, deSelectAllContacts, toggleInSelectedContacts, openEditContactDialog, removeContacts, removeContact, toggleStarredContact, setContactsUnstarred, setContactsStarred} = this.props;\n        const data = this.getFilteredArray(contacts, searchText);\n        const {selectedContactsMenu} = this.state;\n\n        if ( !data && data.length === 0 )\n        {\n            return (\n                <div className=\"flex items-center justify-center h-full\">\n                    <Typography color=\"textSecondary\" variant=\"h5\">\n                        There are no contacts!\n                    </Typography>\n                </div>\n            );\n        }\n\n        return (\n            <FuseAnimate animation=\"transition.slideUpIn\" delay={300}>\n                <ReactTable\n                    className=\"-striped -highlight border-0\"\n                    getTrProps={(state, rowInfo, column) => {\n                        return {\n                            className: \"cursor-pointer\",\n                            onClick  : (e, handleOriginal) => {\n                                if ( rowInfo )\n                                {\n                                    openEditContactDialog(rowInfo.original);\n                                }\n                            }\n                        }\n                    }}\n                    data={data}\n                    columns={[\n                        {\n                            Header   : () => (\n                                <Checkbox\n                                    onClick={(event) => {\n                                        event.stopPropagation();\n                                    }}\n                                    onChange={(event) => {\n                                        event.target.checked ? selectAllContacts() : deSelectAllContacts();\n                                    }}\n                                    checked={selectedContactIds.length === Object.keys(contacts).length && selectedContactIds.length > 0}\n                                    indeterminate={selectedContactIds.length !== Object.keys(contacts).length && selectedContactIds.length > 0}\n                                />\n                            ),\n                            accessor : \"\",\n                            Cell     : row => {\n                                return (<Checkbox\n                                        onClick={(event) => {\n                                            event.stopPropagation();\n                                        }}\n                                        checked={selectedContactIds.includes(row.value.id)}\n                                        onChange={() => toggleInSelectedContacts(row.value.id)}\n                                    />\n                                )\n                            },\n                            className: \"justify-center\",\n                            sortable : false,\n                            width    : 64\n                        },\n                        {\n                            Header   : () => (\n                                selectedContactIds.length > 0 && (\n                                    <React.Fragment>\n                                        <IconButton\n                                            aria-owns={selectedContactsMenu ? 'selectedContactsMenu' : null}\n                                            aria-haspopup=\"true\"\n                                            onClick={this.openSelectedContactMenu}\n                                        >\n                                            <Icon>more_horiz</Icon>\n                                        </IconButton>\n                                        <Menu\n                                            id=\"selectedContactsMenu\"\n                                            anchorEl={selectedContactsMenu}\n                                            open={Boolean(selectedContactsMenu)}\n                                            onClose={this.closeSelectedContactsMenu}\n                                        >\n                                            <MenuList>\n                                                <MenuItem\n                                                    onClick={() => {\n                                                        removeContacts(selectedContactIds);\n                                                        this.closeSelectedContactsMenu();\n                                                    }}\n                                                >\n                                                    <ListItemIcon>\n                                                        <Icon>delete</Icon>\n                                                    </ListItemIcon>\n                                                    <ListItemText inset primary=\"Remove\"/>\n                                                </MenuItem>\n                                                <MenuItem\n                                                    onClick={() => {\n                                                        setContactsStarred(selectedContactIds);\n                                                        this.closeSelectedContactsMenu();\n                                                    }}\n                                                >\n                                                    <ListItemIcon>\n                                                        <Icon>star</Icon>\n                                                    </ListItemIcon>\n                                                    <ListItemText inset primary=\"Starred\"/>\n                                                </MenuItem>\n                                                <MenuItem\n                                                    onClick={() => {\n                                                        setContactsUnstarred(selectedContactIds);\n                                                        this.closeSelectedContactsMenu();\n                                                    }}\n                                                >\n                                                    <ListItemIcon>\n                                                        <Icon>star_border</Icon>\n                                                    </ListItemIcon>\n                                                    <ListItemText inset primary=\"Unstarred\"/>\n                                                </MenuItem>\n                                            </MenuList>\n                                        </Menu>\n                                    </React.Fragment>\n                                )\n                            ),\n                            accessor : \"avatar\",\n                            Cell     : row => (\n                                <Avatar className=\"mr-8\" alt={row.original.name} src={row.value}/>\n                            ),\n                            className: \"justify-center\",\n                            width    : 64,\n                            sortable : false\n                        },\n                        {\n                            Header    : \"First Name\",\n                            accessor  : \"name\",\n                            filterable: true,\n                            className : \"font-bold\"\n                        },\n                        {\n                            Header    : \"Last Name\",\n                            accessor  : \"lastName\",\n                            filterable: true,\n                            className : \"font-bold\"\n                        },\n                        {\n                            Header    : \"Company\",\n                            accessor  : \"company\",\n                            filterable: true\n                        },\n                        {\n                            Header    : \"Job Title\",\n                            accessor  : \"jobTitle\",\n                            filterable: true\n                        },\n                        {\n                            Header    : \"Email\",\n                            accessor  : \"email\",\n                            filterable: true\n                        },\n                        {\n                            Header    : \"Phone\",\n                            accessor  : \"phone\",\n                            filterable: true\n                        },\n                        {\n                            Header: \"\",\n                            width : 128,\n                            Cell  : row => (\n                                <div className=\"flex items-center\">\n                                    <IconButton\n                                        onClick={(ev) => {\n                                            ev.stopPropagation();\n                                            toggleStarredContact(row.original.id)\n                                        }}\n                                    >\n                                        {user.starred && user.starred.includes(row.original.id) ? (\n                                            <Icon>star</Icon>\n                                        ) : (\n                                            <Icon>star_border</Icon>\n                                        )}\n                                    </IconButton>\n                                    <IconButton\n                                        onClick={(ev) => {\n                                            ev.stopPropagation();\n                                            removeContact(row.original.id);\n                                        }}\n                                    >\n                                        <Icon>delete</Icon>\n                                    </IconButton>\n                                </div>\n                            )\n                        }\n                    ]}\n                    defaultPageSize={10}\n                    noDataText=\"No contacts found\"\n                />\n            </FuseAnimate>\n        );\n    }\n}\n\n\nfunction mapDispatchToProps(dispatch)\n{\n    return bindActionCreators({\n        getContacts             : Actions.getContacts,\n        getUserData             : Actions.getUserData,\n        toggleInSelectedContacts: Actions.toggleInSelectedContacts,\n        selectAllContacts       : Actions.selectAllContacts,\n        deSelectAllContacts     : Actions.deSelectAllContacts,\n        openEditContactDialog   : Actions.openEditContactDialog,\n        removeContacts          : Actions.removeContacts,\n        removeContact           : Actions.removeContact,\n        toggleStarredContact    : Actions.toggleStarredContact,\n        toggleStarredContacts   : Actions.toggleStarredContacts,\n        setContactsStarred      : Actions.setContactsStarred,\n        setContactsUnstarred    : Actions.setContactsUnstarred\n    }, dispatch);\n}\n\nfunction mapStateToProps({contactsApp})\n{\n    return {\n        contacts          : contactsApp.contacts.entities,\n        selectedContactIds: contactsApp.contacts.selectedContactIds,\n        searchText        : contactsApp.contacts.searchText,\n        user              : contactsApp.user\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ContactsList));\n"]},"metadata":{},"sourceType":"module"}