{"ast":null,"code":"import _classCallCheck from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/frontend/src/@fuse/components/FuseHighlight/FuseHighlight.js\";\nimport React, { PureComponent } from 'react';\nimport * as Prism from 'prismjs';\nimport './prism-languages';\nimport PropTypes from 'prop-types';\nvar propTypes = {\n  component: PropTypes.node\n};\nvar defaultProps = {\n  component: \"code\"\n};\n\nvar FuseHighlight =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(FuseHighlight, _PureComponent);\n\n  function FuseHighlight(props) {\n    var _this;\n\n    _classCallCheck(this, FuseHighlight);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FuseHighlight).call(this, props));\n\n    _this.handleRefMount = function (domNode) {\n      _this.domNode = domNode;\n    };\n\n    _this.trimCode();\n\n    return _this;\n  }\n\n  _createClass(FuseHighlight, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.highlight();\n    }\n  }, {\n    key: \"trimCode\",\n    value: function trimCode() {\n      // Split the source into lines\n      var sourceLines = this.props.children.split('\\n'); // Remove the first and the last line of the source\n      // code if they are blank lines. This way, the html\n      // can be formatted properly while using fuse-highlight\n      // component\n\n      if (!sourceLines[0].trim()) {\n        sourceLines.shift();\n      }\n\n      if (!sourceLines[sourceLines.length - 1].trim()) {\n        sourceLines.pop();\n      } // Find the first non-whitespace char index in\n      // the first line of the source code\n\n\n      var indexOfFirstChar = sourceLines[0].search(/\\S|$/); // Generate the trimmed source\n\n      var source = ''; // Iterate through all the lines\n\n      sourceLines.forEach(function (line, index) {\n        // Trim the beginning white space depending on the index\n        // and concat the source code\n        source = source + line.substr(indexOfFirstChar, line.length); // If it's not the last line...\n\n        if (index !== sourceLines.length - 1) {\n          // Add a line break at the end\n          source = source + '\\n';\n        }\n      });\n      this.source = source;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.highlight();\n    }\n  }, {\n    key: \"highlight\",\n    value: function highlight() {\n      Prism.highlightElement(this.domNode, this.props.async);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          Wrapper = _this$props.component;\n      return React.createElement(Wrapper, {\n        ref: this.handleRefMount,\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, this.source);\n    }\n  }]);\n\n  return FuseHighlight;\n}(PureComponent);\n\nFuseHighlight.propTypes = propTypes;\nFuseHighlight.defaultProps = defaultProps;\nexport default FuseHighlight;","map":{"version":3,"sources":["/Volumes/Documentos/facu/projetos/aplicacao_analytics/frontend/src/@fuse/components/FuseHighlight/FuseHighlight.js"],"names":["React","PureComponent","Prism","PropTypes","propTypes","component","node","defaultProps","FuseHighlight","props","handleRefMount","domNode","trimCode","highlight","sourceLines","children","split","trim","shift","length","pop","indexOfFirstChar","search","source","forEach","line","index","substr","highlightElement","async","className","Wrapper"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,aAAf,QAAmC,OAAnC;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,OAAO,mBAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,IAAMC,SAAS,GAAG;AACdC,EAAAA,SAAS,EAAEF,SAAS,CAACG;AADP,CAAlB;AAIA,IAAMC,YAAY,GAAG;AACjBF,EAAAA,SAAS;AADQ,CAArB;;IAIMG,a;;;;;AAEF,yBAAYC,KAAZ,EACA;AAAA;;AAAA;;AACI,uFAAMA,KAAN;;AADJ,UA+DAC,cA/DA,GA+DiB,UAAAC,OAAO,EAAI;AACxB,YAAKA,OAAL,GAAeA,OAAf;AACH,KAjED;;AAEI,UAAKC,QAAL;;AAFJ;AAGC;;;;wCAGD;AACI,WAAKC,SAAL;AACH;;;+BAGD;AACI;AACA,UAAMC,WAAW,GAAG,KAAKL,KAAL,CAAWM,QAAX,CAAoBC,KAApB,CAA0B,IAA1B,CAApB,CAFJ,CAII;AACA;AACA;AACA;;AACA,UAAK,CAACF,WAAW,CAAC,CAAD,CAAX,CAAeG,IAAf,EAAN,EACA;AACIH,QAAAA,WAAW,CAACI,KAAZ;AACH;;AAED,UAAK,CAACJ,WAAW,CAACA,WAAW,CAACK,MAAZ,GAAqB,CAAtB,CAAX,CAAoCF,IAApC,EAAN,EACA;AACIH,QAAAA,WAAW,CAACM,GAAZ;AACH,OAhBL,CAkBI;AACA;;;AACA,UAAMC,gBAAgB,GAAGP,WAAW,CAAC,CAAD,CAAX,CAAeQ,MAAf,CAAsB,MAAtB,CAAzB,CApBJ,CAsBI;;AACA,UAAIC,MAAM,GAAG,EAAb,CAvBJ,CAyBI;;AACAT,MAAAA,WAAW,CAACU,OAAZ,CAAoB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAEjC;AACA;AACAH,QAAAA,MAAM,GAAGA,MAAM,GAAGE,IAAI,CAACE,MAAL,CAAYN,gBAAZ,EAA8BI,IAAI,CAACN,MAAnC,CAAlB,CAJiC,CAMjC;;AACA,YAAKO,KAAK,KAAKZ,WAAW,CAACK,MAAZ,GAAqB,CAApC,EACA;AACI;AACAI,UAAAA,MAAM,GAAGA,MAAM,GAAG,IAAlB;AACH;AACJ,OAZD;AAaA,WAAKA,MAAL,GAAcA,MAAd;AACH;;;yCAGD;AACI,WAAKV,SAAL;AACH;;;gCAGD;AACIX,MAAAA,KAAK,CAAC0B,gBAAN,CAAuB,KAAKjB,OAA5B,EAAqC,KAAKF,KAAL,CAAWoB,KAAhD;AACH;;;6BAOD;AAAA,wBAC4C,KAAKpB,KADjD;AAAA,UACWqB,SADX,eACWA,SADX;AAAA,UACiCC,OADjC,eACsB1B,SADtB;AAGI,aACI,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAE,KAAKK,cAAnB;AAAmC,QAAA,SAAS,EAAEoB,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKP,MADV,CADJ;AAKH;;;;EA/EuBtB,a;;AAkF5BO,aAAa,CAACJ,SAAd,GAA0BA,SAA1B;AACAI,aAAa,CAACD,YAAd,GAA6BA,YAA7B;AAEA,eAAeC,aAAf","sourcesContent":["import React, {PureComponent} from 'react';\nimport * as Prism from 'prismjs';\nimport './prism-languages';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n    component: PropTypes.node\n};\n\nconst defaultProps = {\n    component: `code`\n};\n\nclass FuseHighlight extends PureComponent {\n\n    constructor(props)\n    {\n        super(props);\n        this.trimCode();\n    }\n\n    componentDidMount()\n    {\n        this.highlight()\n    }\n\n    trimCode()\n    {\n        // Split the source into lines\n        const sourceLines = this.props.children.split('\\n');\n\n        // Remove the first and the last line of the source\n        // code if they are blank lines. This way, the html\n        // can be formatted properly while using fuse-highlight\n        // component\n        if ( !sourceLines[0].trim() )\n        {\n            sourceLines.shift();\n        }\n\n        if ( !sourceLines[sourceLines.length - 1].trim() )\n        {\n            sourceLines.pop();\n        }\n\n        // Find the first non-whitespace char index in\n        // the first line of the source code\n        const indexOfFirstChar = sourceLines[0].search(/\\S|$/);\n\n        // Generate the trimmed source\n        let source = '';\n\n        // Iterate through all the lines\n        sourceLines.forEach((line, index) => {\n\n            // Trim the beginning white space depending on the index\n            // and concat the source code\n            source = source + line.substr(indexOfFirstChar, line.length);\n\n            // If it's not the last line...\n            if ( index !== sourceLines.length - 1 )\n            {\n                // Add a line break at the end\n                source = source + '\\n';\n            }\n        });\n        this.source = source;\n    }\n\n    componentDidUpdate()\n    {\n        this.highlight()\n    }\n\n    highlight()\n    {\n        Prism.highlightElement(this.domNode, this.props.async)\n    }\n\n    handleRefMount = domNode => {\n        this.domNode = domNode\n    };\n\n    render()\n    {\n        const {className, component: Wrapper} = this.props;\n\n        return (\n            <Wrapper ref={this.handleRefMount} className={className}>\n                {this.source}\n            </Wrapper>\n        )\n    }\n}\n\nFuseHighlight.propTypes = propTypes;\nFuseHighlight.defaultProps = defaultProps;\n\nexport default FuseHighlight;\n"]},"metadata":{},"sourceType":"module"}