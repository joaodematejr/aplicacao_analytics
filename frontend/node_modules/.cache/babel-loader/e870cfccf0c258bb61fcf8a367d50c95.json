{"ast":null,"code":"var _jsxFileName = \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/src/app/main/components/fuse/fuse-dialog/FuseDialogDoc.js\";\nimport React from 'react';\nimport { Button, Typography, DialogTitle, DialogContent, DialogContentText, DialogActions, Icon } from '@material-ui/core';\nimport { FuseHighlight, FusePageSimple } from '@fuse';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as Actions from 'app/store/actions';\n\nvar FuseDialogDoc = function FuseDialogDoc(_ref) {\n  var openDialog = _ref.openDialog,\n      closeDialog = _ref.closeDialog;\n  return React.createElement(FusePageSimple, {\n    header: React.createElement(\"div\", {\n      className: \"flex flex-1 items-center justify-between p-24\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"flex flex-col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"flex items-center mb-16\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      className: \"text-18\",\n      color: \"action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"home\"), React.createElement(Icon, {\n      className: \"text-16\",\n      color: \"action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"chevron_right\"), React.createElement(Typography, {\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"Components\"), React.createElement(Icon, {\n      className: \"text-16\",\n      color: \"action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"chevron_right\"), React.createElement(Typography, {\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Fuse Components\")), React.createElement(Typography, {\n      variant: \"h6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"FuseDialog\"))),\n    content: React.createElement(\"div\", {\n      className: \"p-24 max-w-2xl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: \"mb-16\",\n      component: \"p\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"code\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"FuseDialog\"), \" is a simple dialog trigger for easily showing dialog messages via redux action. It should be located in the theme layouts.\"), React.createElement(Typography, {\n      className: \"mt-32 mb-8\",\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"Usage\"), React.createElement(Typography, {\n      className: \"mb-16\",\n      component: \"p\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"You can show dialog anywhere with dispatching the action openDialog, its using Material-UI's dialog so you can pass the props in the object:\"), React.createElement(FuseHighlight, {\n      component: \"pre\",\n      className: \"language-jsx\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"\\n                        <Button\\n                            onClick={() => openDialog({\\n                                children: (\\n                                    <React.Fragment>\\n                                        <DialogTitle id=\\\"alert-dialog-title\\\">Use Google's location service?</DialogTitle>\\n                                        <DialogContent>\\n                                            <DialogContentText id=\\\"alert-dialog-description\\\">\\n                                                Let Google help apps determine location. This means sending anonymous location data to\\n                                                Google, even when no apps are running.\\n                                            </DialogContentText>\\n                                        </DialogContent>\\n                                        <DialogActions>\\n                                            <Button onClick={closeDialog} color=\\\"primary\\\">\\n                                                Disagree\\n                                            </Button>\\n                                            <Button onClick={closeDialog} color=\\\"primary\\\" autoFocus>\\n                                                Agree\\n                                            </Button>\\n                                        </DialogActions>\\n                                    </React.Fragment>\\n                                )\\n                            })}\\n                            variant=\\\"contained\\\"\\n                            color=\\\"secondary\\\"\\n                        >\\n                        Open Dialog\\n                        </Button>\\n                            \"), React.createElement(Typography, {\n      className: \"mt-32 mb-8\",\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Example\"), React.createElement(Button, {\n      onClick: function onClick() {\n        return openDialog({\n          children: React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          }, React.createElement(DialogTitle, {\n            id: \"alert-dialog-title\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76\n            },\n            __self: this\n          }, \"Use Google's location service?\"), React.createElement(DialogContent, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77\n            },\n            __self: this\n          }, React.createElement(DialogContentText, {\n            id: \"alert-dialog-description\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78\n            },\n            __self: this\n          }, \"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\")), React.createElement(DialogActions, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83\n            },\n            __self: this\n          }, React.createElement(Button, {\n            onClick: closeDialog,\n            color: \"primary\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84\n            },\n            __self: this\n          }, \"Disagree\"), React.createElement(Button, {\n            onClick: closeDialog,\n            color: \"primary\",\n            autoFocus: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }, \"Agree\")))\n        });\n      },\n      variant: \"contained\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Open Dialog\")),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  });\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    openDialog: Actions.openDialog,\n    closeDialog: Actions.closeDialog\n  }, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(FuseDialogDoc);","map":{"version":3,"sources":["/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/src/app/main/components/fuse/fuse-dialog/FuseDialogDoc.js"],"names":["React","Button","Typography","DialogTitle","DialogContent","DialogContentText","DialogActions","Icon","FuseHighlight","FusePageSimple","connect","bindActionCreators","Actions","FuseDialogDoc","openDialog","closeDialog","children","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Button, Typography, DialogTitle, DialogContent, DialogContentText, DialogActions, Icon} from '@material-ui/core';\nimport {FuseHighlight, FusePageSimple} from '@fuse';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport * as Actions from 'app/store/actions';\n\nconst FuseDialogDoc = ({openDialog, closeDialog}) => {\n    return (\n        <FusePageSimple\n            header={\n                <div className=\"flex flex-1 items-center justify-between p-24\">\n                    <div className=\"flex flex-col\">\n                        <div className=\"flex items-center mb-16\">\n                            <Icon className=\"text-18\" color=\"action\">home</Icon>\n                            <Icon className=\"text-16\" color=\"action\">chevron_right</Icon>\n                            <Typography color=\"textSecondary\">Components</Typography>\n                            <Icon className=\"text-16\" color=\"action\">chevron_right</Icon>\n                            <Typography color=\"textSecondary\">Fuse Components</Typography>\n                        </div>\n                        <Typography variant=\"h6\">FuseDialog</Typography>\n                    </div>\n                </div>\n            }\n            content={\n                <div className=\"p-24 max-w-2xl\">\n\n                    <Typography className=\"mb-16\" component=\"p\">\n                        <code>FuseDialog</code> is a simple dialog trigger for easily showing dialog messages via redux action. It should be located in the theme layouts.\n                    </Typography>\n\n                    <Typography className=\"mt-32 mb-8\" variant=\"h5\">Usage</Typography>\n\n                    <Typography className=\"mb-16\" component=\"p\">\n                        You can show dialog anywhere with dispatching the action openDialog, its using Material-UI's dialog so you can pass the props in the object:\n                    </Typography>\n\n                    <FuseHighlight component=\"pre\" className=\"language-jsx\">\n                        {`\n                        <Button\n                            onClick={() => openDialog({\n                                children: (\n                                    <React.Fragment>\n                                        <DialogTitle id=\"alert-dialog-title\">Use Google's location service?</DialogTitle>\n                                        <DialogContent>\n                                            <DialogContentText id=\"alert-dialog-description\">\n                                                Let Google help apps determine location. This means sending anonymous location data to\n                                                Google, even when no apps are running.\n                                            </DialogContentText>\n                                        </DialogContent>\n                                        <DialogActions>\n                                            <Button onClick={closeDialog} color=\"primary\">\n                                                Disagree\n                                            </Button>\n                                            <Button onClick={closeDialog} color=\"primary\" autoFocus>\n                                                Agree\n                                            </Button>\n                                        </DialogActions>\n                                    </React.Fragment>\n                                )\n                            })}\n                            variant=\"contained\"\n                            color=\"secondary\"\n                        >\n                        Open Dialog\n                        </Button>\n                            `}\n                    </FuseHighlight>\n\n                    <Typography className=\"mt-32 mb-8\" variant=\"h5\">Example</Typography>\n\n                    <Button\n                        onClick={() => openDialog({\n                            children: (\n                                <React.Fragment>\n                                    <DialogTitle id=\"alert-dialog-title\">Use Google's location service?</DialogTitle>\n                                    <DialogContent>\n                                        <DialogContentText id=\"alert-dialog-description\">\n                                            Let Google help apps determine location. This means sending anonymous location data to\n                                            Google, even when no apps are running.\n                                        </DialogContentText>\n                                    </DialogContent>\n                                    <DialogActions>\n                                        <Button onClick={closeDialog} color=\"primary\">\n                                            Disagree\n                                        </Button>\n                                        <Button onClick={closeDialog} color=\"primary\" autoFocus>\n                                            Agree\n                                        </Button>\n                                    </DialogActions>\n                                </React.Fragment>\n                            )\n                        })}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                    >\n                        Open Dialog\n                    </Button>\n                </div>\n            }\n        />\n    );\n};\n\nfunction mapDispatchToProps(dispatch)\n{\n    return bindActionCreators({\n            openDialog : Actions.openDialog,\n            closeDialog: Actions.closeDialog\n        },\n        dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(FuseDialogDoc);\n"]},"metadata":{},"sourceType":"module"}