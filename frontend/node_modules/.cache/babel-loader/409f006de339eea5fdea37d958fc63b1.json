{"ast":null,"code":"import _classCallCheck from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/src/app/fuse-layouts/shared-components/chatPanel/ContactList.js\";\nimport React, { Component } from 'react';\nimport { withStyles, Button, Avatar, Divider, Tooltip } from '@material-ui/core';\nimport { FuseScrollbars, FuseAnimateGroup } from '@fuse';\nimport classNames from 'classnames';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as Actions from './store/actions';\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      background: theme.palette.background.default\n    },\n    contactButton: {\n      width: 70,\n      minWidth: 70,\n      flex: '0 0 auto',\n      '&.active:after': {\n        position: 'absolute',\n        top: 8,\n        right: 0,\n        bottom: 8,\n        content: \"''\",\n        width: 4,\n        borderTopLeftRadius: 4,\n        borderBottomLeftRadius: 4,\n        backgroundColor: theme.palette.primary.main\n      }\n    },\n    unreadBadge: {\n      position: 'absolute',\n      minWidth: 18,\n      height: 18,\n      top: 4,\n      left: 10,\n      borderRadius: 9,\n      padding: '0 5px',\n      fontSize: 11,\n      textAlign: 'center',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText,\n      boxShadow: '0 2px 2px 0 rgba(0, 0, 0, 0.35)',\n      zIndex: 10\n    },\n    status: {\n      position: 'absolute',\n      width: 12,\n      height: 12,\n      bottom: 4,\n      left: 44,\n      border: '2px solid ' + theme.palette.background.default,\n      borderRadius: '50%',\n      zIndex: 10,\n      '&.online': {\n        backgroundColor: '#4CAF50'\n      },\n      '&.do-not-disturb': {\n        backgroundColor: '#F44336'\n      },\n      '&.away': {\n        backgroundColor: '#FFC107'\n      },\n      '&.offline': {\n        backgroundColor: '#646464'\n      }\n    }\n  };\n};\n\nvar ContactList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactList, _Component);\n\n  function ContactList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleContactClick = function (contactId) {\n      _this.props.openChatPanel();\n\n      _this.scrollToTop();\n    };\n\n    _this.scrollToTop = function () {\n      _this.contactListScroll.scrollTop = 0;\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          contacts = _this$props.contacts,\n          user = _this$props.user,\n          selectedContactId = _this$props.selectedContactId;\n\n      var ContactButton = function ContactButton(_ref) {\n        var contact = _ref.contact;\n        return React.createElement(Tooltip, {\n          title: contact.name,\n          placement: \"left\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(Button, {\n          onClick: function onClick() {\n            return _this2.handleContactClick(contact.id);\n          },\n          className: classNames(classes.contactButton, {\n            'active': selectedContactId === contact.id\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, contact.unread && React.createElement(\"div\", {\n          className: classes.unreadBadge,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, contact.unread), React.createElement(\"div\", {\n          className: classNames(contact.status, classes.status),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }), React.createElement(Avatar, {\n          src: contact.avatar,\n          alt: contact.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, !contact.avatar || contact.avatar === '' ? contact.name[0] : '')));\n      };\n\n      return React.createElement(FuseScrollbars, {\n        className: classNames(classes.root, \"flex flex-no-shrink flex-col overflow-y-auto py-8\"),\n        containerRef: function containerRef(ref) {\n          _this2.contactListScroll = ref;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, contacts.length > 0 && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(FuseAnimateGroup, {\n        enter: {\n          animation: \"transition.expandIn\"\n        },\n        className: \"flex flex-col flex-no-shrink\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, user && user.chatList && user.chatList.map(function (chat) {\n        var contact = contacts.find(function (_contact) {\n          return _contact.id === chat.contactId;\n        });\n        return React.createElement(ContactButton, {\n          key: contact.id,\n          contact: contact,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        });\n      }), React.createElement(Divider, {\n        className: \"mx-24 my-8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), contacts.map(function (contact) {\n        var chatContact = user.chatList.find(function (_chat) {\n          return _chat.contactId === contact.id;\n        });\n        return !chatContact ? React.createElement(ContactButton, {\n          key: contact.id,\n          contact: contact,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }) : '';\n      }))));\n    }\n  }]);\n\n  return ContactList;\n}(Component);\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getChat: Actions.getChat,\n    openChatPanel: Actions.openChatPanel\n  }, dispatch);\n}\n\nfunction mapStateToProps(_ref2) {\n  var chatPanel = _ref2.chatPanel;\n  return {\n    contacts: chatPanel.contacts.entities,\n    selectedContactId: chatPanel.contacts.selectedContactId,\n    user: chatPanel.user\n  };\n}\n\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(ContactList));","map":{"version":3,"sources":["/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/src/app/fuse-layouts/shared-components/chatPanel/ContactList.js"],"names":["React","Component","withStyles","Button","Avatar","Divider","Tooltip","FuseScrollbars","FuseAnimateGroup","classNames","connect","bindActionCreators","Actions","styles","theme","root","background","palette","default","contactButton","width","minWidth","flex","position","top","right","bottom","content","borderTopLeftRadius","borderBottomLeftRadius","backgroundColor","primary","main","unreadBadge","height","left","borderRadius","padding","fontSize","textAlign","display","alignItems","justifyContent","secondary","color","contrastText","boxShadow","zIndex","status","border","ContactList","handleContactClick","contactId","props","openChatPanel","scrollToTop","contactListScroll","scrollTop","classes","contacts","user","selectedContactId","ContactButton","contact","name","id","unread","avatar","ref","length","animation","chatList","map","chat","find","_contact","chatContact","_chat","mapDispatchToProps","dispatch","getChat","mapStateToProps","chatPanel","entities"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,OAA9C,QAA6D,mBAA7D;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAO,KAAKC,OAAZ,MAAyB,iBAAzB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AACrBC,IAAAA,IAAI,EAAE;AACFC,MAAAA,UAAU,EAAEF,KAAK,CAACG,OAAN,CAAcD,UAAd,CAAyBE;AADnC,KADe;AAIrBC,IAAAA,aAAa,EAAE;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXC,MAAAA,IAAI,EAAE,UAHK;AAIX,wBAAkB;AACdC,QAAAA,QAAQ,EAAE,UADI;AAEdC,QAAAA,GAAG,EAAE,CAFS;AAGdC,QAAAA,KAAK,EAAE,CAHO;AAIdC,QAAAA,MAAM,EAAE,CAJM;AAKdC,QAAAA,OAAO,EAAE,IALK;AAMdP,QAAAA,KAAK,EAAE,CANO;AAOdQ,QAAAA,mBAAmB,EAAE,CAPP;AAQdC,QAAAA,sBAAsB,EAAE,CARV;AASdC,QAAAA,eAAe,EAAEhB,KAAK,CAACG,OAAN,CAAcc,OAAd,CAAsBC;AATzB;AAJP,KAJM;AAoBrBC,IAAAA,WAAW,EAAE;AACTV,MAAAA,QAAQ,EAAE,UADD;AAETF,MAAAA,QAAQ,EAAE,EAFD;AAGTa,MAAAA,MAAM,EAAE,EAHC;AAITV,MAAAA,GAAG,EAAE,CAJI;AAKTW,MAAAA,IAAI,EAAE,EALG;AAMTC,MAAAA,YAAY,EAAE,CANL;AAOTC,MAAAA,OAAO,EAAE,OAPA;AAQTC,MAAAA,QAAQ,EAAE,EARD;AASTC,MAAAA,SAAS,EAAE,QATF;AAUTC,MAAAA,OAAO,EAAE,MAVA;AAWTC,MAAAA,UAAU,EAAE,QAXH;AAYTC,MAAAA,cAAc,EAAE,QAZP;AAaTZ,MAAAA,eAAe,EAAEhB,KAAK,CAACG,OAAN,CAAc0B,SAAd,CAAwBX,IAbhC;AAcTY,MAAAA,KAAK,EAAE9B,KAAK,CAACG,OAAN,CAAc0B,SAAd,CAAwBE,YAdtB;AAeTC,MAAAA,SAAS,EAAE,iCAfF;AAgBTC,MAAAA,MAAM,EAAE;AAhBC,KApBQ;AAsCrBC,IAAAA,MAAM,EAAE;AACJzB,MAAAA,QAAQ,EAAE,UADN;AAEJH,MAAAA,KAAK,EAAE,EAFH;AAGJc,MAAAA,MAAM,EAAE,EAHJ;AAIJR,MAAAA,MAAM,EAAE,CAJJ;AAKJS,MAAAA,IAAI,EAAE,EALF;AAMJc,MAAAA,MAAM,EAAE,eAAenC,KAAK,CAACG,OAAN,CAAcD,UAAd,CAAyBE,OAN5C;AAOJkB,MAAAA,YAAY,EAAE,KAPV;AAQJW,MAAAA,MAAM,EAAE,EARJ;AAUJ,kBAAY;AACRjB,QAAAA,eAAe,EAAE;AADT,OAVR;AAcJ,0BAAoB;AAChBA,QAAAA,eAAe,EAAE;AADD,OAdhB;AAkBJ,gBAAU;AACNA,QAAAA,eAAe,EAAE;AADX,OAlBN;AAsBJ,mBAAa;AACTA,QAAAA,eAAe,EAAE;AADR;AAtBT;AAtCa,GAAL;AAAA,CAApB;;IAkEMoB,W;;;;;;;;;;;;;;;;;;UAEFC,kB,GAAqB,UAACC,SAAD,EAAe;AAChC,YAAKC,KAAL,CAAWC,aAAX;;AACA,YAAKC,WAAL;AACH,K;;UAEDA,W,GAAc,YAAM;AAChB,YAAKC,iBAAL,CAAuBC,SAAvB,GAAmC,CAAnC;AACH,K;;;;;;;6BAEQ;AAAA;;AAAA,wBACkD,KAAKJ,KADvD;AAAA,UACGK,OADH,eACGA,OADH;AAAA,UACYC,QADZ,eACYA,QADZ;AAAA,UACsBC,IADtB,eACsBA,IADtB;AAAA,UAC4BC,iBAD5B,eAC4BA,iBAD5B;;AAGL,UAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAiB;AAAA,YAAdC,OAAc,QAAdA,OAAc;AACnC,eACI,oBAAC,OAAD;AAAS,UAAA,KAAK,EAAEA,OAAO,CAACC,IAAxB;AAA8B,UAAA,SAAS,EAAC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,MAAD;AACI,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACb,kBAAL,CAAwBY,OAAO,CAACE,EAAhC,CAAN;AAAA,WADb;AAEI,UAAA,SAAS,EAAExD,UAAU,CAACiD,OAAO,CAACvC,aAAT,EAAwB;AAAE,sBAAW0C,iBAAiB,KAAKE,OAAO,CAACE;AAA3C,WAAxB,CAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIKF,OAAO,CAACG,MAAR,IACG;AAAK,UAAA,SAAS,EAAER,OAAO,CAACzB,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAsC8B,OAAO,CAACG,MAA9C,CALR,EAOI;AAAK,UAAA,SAAS,EAAEzD,UAAU,CAACsD,OAAO,CAACf,MAAT,EAAiBU,OAAO,CAACV,MAAzB,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAPJ,EAQI,oBAAC,MAAD;AACI,UAAA,GAAG,EAAEe,OAAO,CAACI,MADjB;AAEI,UAAA,GAAG,EAAEJ,OAAO,CAACC,IAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIK,CAACD,OAAO,CAACI,MAAT,IAAmBJ,OAAO,CAACI,MAAR,KAAmB,EAAtC,GAA2CJ,OAAO,CAACC,IAAR,CAAa,CAAb,CAA3C,GAA6D,EAJlE,CARJ,CADJ,CADJ;AAmBH,OApBD;;AAsBA,aACI,oBAAC,cAAD;AACI,QAAA,SAAS,EAAEvD,UAAU,CAACiD,OAAO,CAAC3C,IAAT,EAAe,mDAAf,CADzB;AAEI,QAAA,YAAY,EAAE,sBAACqD,GAAD,EAAS;AACnB,UAAA,MAAI,CAACZ,iBAAL,GAAyBY,GAAzB;AACH,SAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMKT,QAAQ,CAACU,MAAT,GAAkB,CAAlB,IACG,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,gBAAD;AACI,QAAA,KAAK,EAAE;AACHC,UAAAA,SAAS,EAAE;AADR,SADX;AAII,QAAA,SAAS,EAAC,8BAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMMV,IAAI,IAAIA,IAAI,CAACW,QAAd,IACGX,IAAI,CAACW,QAAL,CAAcC,GAAd,CAAkB,UAAAC,IAAI,EAAI;AACtB,YAAMV,OAAO,GAAGJ,QAAQ,CAACe,IAAT,CAAc,UAACC,QAAD;AAAA,iBAAcA,QAAQ,CAACV,EAAT,KAAgBQ,IAAI,CAACrB,SAAnC;AAAA,SAAd,CAAhB;AACA,eACI,oBAAC,aAAD;AAAe,UAAA,GAAG,EAAEW,OAAO,CAACE,EAA5B;AAAgC,UAAA,OAAO,EAAEF,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,OALD,CAPR,EAaI,oBAAC,OAAD;AAAS,QAAA,SAAS,EAAC,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbJ,EAcKJ,QAAQ,CAACa,GAAT,CAAa,UAAAT,OAAO,EAAI;AACrB,YAAMa,WAAW,GAAGhB,IAAI,CAACW,QAAL,CAAcG,IAAd,CAAmB,UAACG,KAAD;AAAA,iBAAWA,KAAK,CAACzB,SAAN,KAAoBW,OAAO,CAACE,EAAvC;AAAA,SAAnB,CAApB;AACA,eAAO,CAACW,WAAD,GAAe,oBAAC,aAAD;AAAe,UAAA,GAAG,EAAEb,OAAO,CAACE,EAA5B;AAAgC,UAAA,OAAO,EAAEF,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAf,GAAsE,EAA7E;AACH,OAHA,CAdL,CADJ,CAPR,CADJ;AAgCH;;;;EApEqB9D,S;;AAuE1B,SAAS6E,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAOpE,kBAAkB,CAAC;AACtBqE,IAAAA,OAAO,EAAEpE,OAAO,CAACoE,OADK;AAEtB1B,IAAAA,aAAa,EAAE1C,OAAO,CAAC0C;AAFD,GAAD,EAGtByB,QAHsB,CAAzB;AAIH;;AAED,SAASE,eAAT,QAAwC;AAAA,MAAbC,SAAa,SAAbA,SAAa;AACpC,SAAO;AACHvB,IAAAA,QAAQ,EAAEuB,SAAS,CAACvB,QAAV,CAAmBwB,QAD1B;AAEHtB,IAAAA,iBAAiB,EAAEqB,SAAS,CAACvB,QAAV,CAAmBE,iBAFnC;AAGHD,IAAAA,IAAI,EAAEsB,SAAS,CAACtB;AAHb,GAAP;AAKH;;AAED,eAAe1D,UAAU,CAACW,MAAD,CAAV,CAAmBH,OAAO,CAACuE,eAAD,EAAkBH,kBAAlB,CAAP,CAA6C5B,WAA7C,CAAnB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { withStyles, Button, Avatar, Divider, Tooltip } from '@material-ui/core';\nimport { FuseScrollbars, FuseAnimateGroup } from '@fuse';\nimport classNames from 'classnames';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as Actions from './store/actions';\n\nconst styles = theme => ({\n    root: {\n        background: theme.palette.background.default\n    },\n    contactButton: {\n        width: 70,\n        minWidth: 70,\n        flex: '0 0 auto',\n        '&.active:after': {\n            position: 'absolute',\n            top: 8,\n            right: 0,\n            bottom: 8,\n            content: \"''\",\n            width: 4,\n            borderTopLeftRadius: 4,\n            borderBottomLeftRadius: 4,\n            backgroundColor: theme.palette.primary.main\n        }\n    },\n    unreadBadge: {\n        position: 'absolute',\n        minWidth: 18,\n        height: 18,\n        top: 4,\n        left: 10,\n        borderRadius: 9,\n        padding: '0 5px',\n        fontSize: 11,\n        textAlign: 'center',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: theme.palette.secondary.main,\n        color: theme.palette.secondary.contrastText,\n        boxShadow: '0 2px 2px 0 rgba(0, 0, 0, 0.35)',\n        zIndex: 10\n    },\n    status: {\n        position: 'absolute',\n        width: 12,\n        height: 12,\n        bottom: 4,\n        left: 44,\n        border: '2px solid ' + theme.palette.background.default,\n        borderRadius: '50%',\n        zIndex: 10,\n\n        '&.online': {\n            backgroundColor: '#4CAF50'\n        },\n\n        '&.do-not-disturb': {\n            backgroundColor: '#F44336'\n        },\n\n        '&.away': {\n            backgroundColor: '#FFC107'\n        },\n\n        '&.offline': {\n            backgroundColor: '#646464'\n        }\n    }\n});\n\nclass ContactList extends Component {\n\n    handleContactClick = (contactId) => {\n        this.props.openChatPanel();\n        this.scrollToTop();\n    };\n\n    scrollToTop = () => {\n        this.contactListScroll.scrollTop = 0;\n    };\n\n    render() {\n        const { classes, contacts, user, selectedContactId } = this.props;\n\n        const ContactButton = ({ contact }) => {\n            return (\n                <Tooltip title={contact.name} placement=\"left\">\n                    <Button\n                        onClick={() => this.handleContactClick(contact.id)}\n                        className={classNames(classes.contactButton, { 'active': (selectedContactId === contact.id) })}\n                    >\n                        {contact.unread && (\n                            <div className={classes.unreadBadge}>{contact.unread}</div>\n                        )}\n                        <div className={classNames(contact.status, classes.status)} />\n                        <Avatar\n                            src={contact.avatar}\n                            alt={contact.name}\n                        >\n                            {!contact.avatar || contact.avatar === '' ? contact.name[0] : ''}\n                        </Avatar>\n                    </Button>\n                </Tooltip>\n            )\n        };\n\n        return (\n            <FuseScrollbars\n                className={classNames(classes.root, \"flex flex-no-shrink flex-col overflow-y-auto py-8\")}\n                containerRef={(ref) => {\n                    this.contactListScroll = ref\n                }}\n            >\n                {contacts.length > 0 && (\n                    <React.Fragment>\n                        <FuseAnimateGroup\n                            enter={{\n                                animation: \"transition.expandIn\"\n                            }}\n                            className=\"flex flex-col flex-no-shrink\"\n                        >\n                            {(user && user.chatList) &&\n                                user.chatList.map(chat => {\n                                    const contact = contacts.find((_contact) => _contact.id === chat.contactId);\n                                    return (\n                                        <ContactButton key={contact.id} contact={contact} />\n                                    )\n                                })}\n                            <Divider className=\"mx-24 my-8\" />\n                            {contacts.map(contact => {\n                                const chatContact = user.chatList.find((_chat) => _chat.contactId === contact.id);\n                                return !chatContact ? <ContactButton key={contact.id} contact={contact} /> : '';\n                            })}\n                        </FuseAnimateGroup>\n                    </React.Fragment>\n                )}\n            </FuseScrollbars>\n        );\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        getChat: Actions.getChat,\n        openChatPanel: Actions.openChatPanel\n    }, dispatch);\n}\n\nfunction mapStateToProps({ chatPanel }) {\n    return {\n        contacts: chatPanel.contacts.entities,\n        selectedContactId: chatPanel.contacts.selectedContactId,\n        user: chatPanel.user\n    }\n}\n\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(ContactList));\n\n"]},"metadata":{},"sourceType":"module"}