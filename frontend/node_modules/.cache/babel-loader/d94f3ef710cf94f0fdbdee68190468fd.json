{"ast":null,"code":"import _classCallCheck from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/src/app/fuse-layouts/shared-components/chatPanel/ContactList.js\";\nimport React, { Component } from 'react';\nimport { withStyles, Button, Avatar, Divider, Tooltip } from '@material-ui/core';\nimport { FuseScrollbars, FuseAnimateGroup } from '@fuse';\nimport classNames from 'classnames';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as Actions from './store/actions';\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      background: theme.palette.background.default\n    },\n    contactButton: {\n      width: 70,\n      minWidth: 70,\n      flex: '0 0 auto',\n      '&.active:after': {\n        position: 'absolute',\n        top: 8,\n        right: 0,\n        bottom: 8,\n        content: \"''\",\n        width: 4,\n        borderTopLeftRadius: 4,\n        borderBottomLeftRadius: 4,\n        backgroundColor: theme.palette.primary.main\n      }\n    },\n    unreadBadge: {\n      position: 'absolute',\n      minWidth: 18,\n      height: 18,\n      top: 4,\n      left: 10,\n      borderRadius: 9,\n      padding: '0 5px',\n      fontSize: 11,\n      textAlign: 'center',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText,\n      boxShadow: '0 2px 2px 0 rgba(0, 0, 0, 0.35)',\n      zIndex: 10\n    },\n    status: {\n      position: 'absolute',\n      width: 12,\n      height: 12,\n      bottom: 4,\n      left: 44,\n      border: '2px solid ' + theme.palette.background.default,\n      borderRadius: '50%',\n      zIndex: 10,\n      '&.online': {\n        backgroundColor: '#4CAF50'\n      },\n      '&.do-not-disturb': {\n        backgroundColor: '#F44336'\n      },\n      '&.away': {\n        backgroundColor: '#FFC107'\n      },\n      '&.offline': {\n        backgroundColor: '#646464'\n      }\n    }\n  };\n};\n\nvar ContactList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactList, _Component);\n\n  function ContactList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleContactClick = function (contactId) {\n      _this.props.openChatPanel();\n\n      _this.props.getChat(contactId);\n\n      _this.scrollToTop();\n    };\n\n    _this.scrollToTop = function () {\n      _this.contactListScroll.scrollTop = 0;\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          contacts = _this$props.contacts,\n          user = _this$props.user,\n          selectedContactId = _this$props.selectedContactId;\n\n      var ContactButton = function ContactButton(_ref) {\n        var contact = _ref.contact;\n        return React.createElement(Tooltip, {\n          title: contact.name,\n          placement: \"left\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, React.createElement(Button, {\n          onClick: function onClick() {\n            return _this2.handleContactClick(contact.id);\n          },\n          className: classNames(classes.contactButton, {\n            'active': selectedContactId === contact.id\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, contact.unread && React.createElement(\"div\", {\n          className: classes.unreadBadge,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, contact.unread), React.createElement(\"div\", {\n          className: classNames(contact.status, classes.status),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }), React.createElement(Avatar, {\n          src: contact.avatar,\n          alt: contact.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, !contact.avatar || contact.avatar === '' ? contact.name[0] : '')));\n      };\n\n      return React.createElement(FuseScrollbars, {\n        className: classNames(classes.root, \"flex flex-no-shrink flex-col overflow-y-auto py-8\"),\n        containerRef: function containerRef(ref) {\n          _this2.contactListScroll = ref;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, contacts.length > 0 && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(FuseAnimateGroup, {\n        enter: {\n          animation: \"transition.expandIn\"\n        },\n        className: \"flex flex-col flex-no-shrink\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, user && user.chatList && user.chatList.map(function (chat) {\n        var contact = contacts.find(function (_contact) {\n          return _contact.id === chat.contactId;\n        });\n        return React.createElement(ContactButton, {\n          key: contact.id,\n          contact: contact,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        });\n      }), React.createElement(Divider, {\n        className: \"mx-24 my-8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), contacts.map(function (contact) {\n        var chatContact = user.chatList.find(function (_chat) {\n          return _chat.contactId === contact.id;\n        });\n        return !chatContact ? React.createElement(ContactButton, {\n          key: contact.id,\n          contact: contact,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }) : '';\n      }))));\n    }\n  }]);\n\n  return ContactList;\n}(Component);\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getChat: Actions.getChat,\n    openChatPanel: Actions.openChatPanel\n  }, dispatch);\n}\n\nfunction mapStateToProps(_ref2) {\n  var chatPanel = _ref2.chatPanel;\n  return {\n    contacts: chatPanel.contacts.entities,\n    selectedContactId: chatPanel.contacts.selectedContactId,\n    user: chatPanel.user\n  };\n}\n\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(ContactList));","map":{"version":3,"sources":["/Volumes/Documentos/facu/projetos/aplicacao_analytics/test/src/app/fuse-layouts/shared-components/chatPanel/ContactList.js"],"names":["React","Component","withStyles","Button","Avatar","Divider","Tooltip","FuseScrollbars","FuseAnimateGroup","classNames","connect","bindActionCreators","Actions","styles","theme","root","background","palette","default","contactButton","width","minWidth","flex","position","top","right","bottom","content","borderTopLeftRadius","borderBottomLeftRadius","backgroundColor","primary","main","unreadBadge","height","left","borderRadius","padding","fontSize","textAlign","display","alignItems","justifyContent","secondary","color","contrastText","boxShadow","zIndex","status","border","ContactList","handleContactClick","contactId","props","openChatPanel","getChat","scrollToTop","contactListScroll","scrollTop","classes","contacts","user","selectedContactId","ContactButton","contact","name","id","unread","avatar","ref","length","animation","chatList","map","chat","find","_contact","chatContact","_chat","mapDispatchToProps","dispatch","mapStateToProps","chatPanel","entities"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {withStyles, Button, Avatar, Divider, Tooltip} from '@material-ui/core';\nimport {FuseScrollbars, FuseAnimateGroup} from '@fuse';\nimport classNames from 'classnames';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport * as Actions from './store/actions';\n\nconst styles = theme => ({\n    root         : {\n        background: theme.palette.background.default\n    },\n    contactButton: {\n        width           : 70,\n        minWidth        : 70,\n        flex            : '0 0 auto',\n        '&.active:after': {\n            position              : 'absolute',\n            top                   : 8,\n            right                 : 0,\n            bottom                : 8,\n            content               : \"''\",\n            width                 : 4,\n            borderTopLeftRadius   : 4,\n            borderBottomLeftRadius: 4,\n            backgroundColor       : theme.palette.primary.main\n        }\n    },\n    unreadBadge  : {\n        position       : 'absolute',\n        minWidth       : 18,\n        height         : 18,\n        top            : 4,\n        left           : 10,\n        borderRadius   : 9,\n        padding        : '0 5px',\n        fontSize       : 11,\n        textAlign      : 'center',\n        display        : 'flex',\n        alignItems     : 'center',\n        justifyContent : 'center',\n        backgroundColor: theme.palette.secondary.main,\n        color          : theme.palette.secondary.contrastText,\n        boxShadow      : '0 2px 2px 0 rgba(0, 0, 0, 0.35)',\n        zIndex         : 10\n    },\n    status       : {\n        position    : 'absolute',\n        width       : 12,\n        height      : 12,\n        bottom      : 4,\n        left        : 44,\n        border      : '2px solid ' + theme.palette.background.default,\n        borderRadius: '50%',\n        zIndex      : 10,\n\n        '&.online': {\n            backgroundColor: '#4CAF50'\n        },\n\n        '&.do-not-disturb': {\n            backgroundColor: '#F44336'\n        },\n\n        '&.away': {\n            backgroundColor: '#FFC107'\n        },\n\n        '&.offline': {\n            backgroundColor: '#646464'\n        }\n    }\n});\n\nclass ContactList extends Component {\n\n    handleContactClick = (contactId) => {\n        this.props.openChatPanel();\n        this.props.getChat(contactId);\n        this.scrollToTop();\n    };\n\n    scrollToTop = () => {\n        this.contactListScroll.scrollTop = 0;\n    };\n\n    render()\n    {\n        const {classes, contacts, user, selectedContactId} = this.props;\n\n        const ContactButton = ({contact}) => {\n            return (\n                <Tooltip title={contact.name} placement=\"left\">\n                    <Button\n                        onClick={() => this.handleContactClick(contact.id)}\n                        className={classNames(classes.contactButton, {'active': (selectedContactId === contact.id)})}\n                    >\n                        {contact.unread && (\n                            <div className={classes.unreadBadge}>{contact.unread}</div>\n                        )}\n                        <div className={classNames(contact.status, classes.status)}/>\n                        <Avatar\n                            src={contact.avatar}\n                            alt={contact.name}\n                        >\n                            {!contact.avatar || contact.avatar === '' ? contact.name[0] : ''}\n                        </Avatar>\n                    </Button>\n                </Tooltip>\n            )\n        };\n\n        return (\n            <FuseScrollbars\n                className={classNames(classes.root, \"flex flex-no-shrink flex-col overflow-y-auto py-8\")}\n                containerRef={(ref) => {\n                    this.contactListScroll = ref\n                }}\n            >\n                {contacts.length > 0 && (\n                    <React.Fragment>\n                        <FuseAnimateGroup\n                            enter={{\n                                animation: \"transition.expandIn\"\n                            }}\n                            className=\"flex flex-col flex-no-shrink\"\n                        >\n                            {(user && user.chatList) &&\n                            user.chatList.map(chat => {\n                                const contact = contacts.find((_contact) => _contact.id === chat.contactId);\n                                return (\n                                    <ContactButton key={contact.id} contact={contact}/>\n                                )\n                            })}\n                            <Divider className=\"mx-24 my-8\"/>\n                            {contacts.map(contact => {\n                                const chatContact = user.chatList.find((_chat) => _chat.contactId === contact.id);\n                                return !chatContact ? <ContactButton key={contact.id} contact={contact}/> : '';\n                            })}\n                        </FuseAnimateGroup>\n                    </React.Fragment>\n                )}\n            </FuseScrollbars>\n        );\n    };\n}\n\nfunction mapDispatchToProps(dispatch)\n{\n    return bindActionCreators({\n        getChat      : Actions.getChat,\n        openChatPanel: Actions.openChatPanel\n    }, dispatch);\n}\n\nfunction mapStateToProps({chatPanel})\n{\n    return {\n        contacts         : chatPanel.contacts.entities,\n        selectedContactId: chatPanel.contacts.selectedContactId,\n        user             : chatPanel.user\n    }\n}\n\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(ContactList));\n\n"]},"metadata":{},"sourceType":"module"}